
const find = (x) => {
    if (p[x] != x) {
        p[x] = find(p[x]);
    }
    return p[x];
};

const union = (a, b) => {
    const pa = find(a);
    const pb = find(b);
    if (pa != pb) {
        size[pb] += size[pa];
        p[pa] = pb;
    }
};

const f_gold = (graph, initial) => {
    const n = graph.length;
    const p = Array.from(Array(n).keys());
    const size = Array(n).fill(1);
    const clean = Array(n).fill(true);
    for (let i = 0; i < initial.length; i++) {
        clean[initial[i]] = false;
    }
    for (let i = 0; i < n; i++) {
        if (!clean[i]) {
            continue;
        }
        for (let j = i + 1; j < n; j++) {
            if (clean[j] && graph[i][j] == 1) {
                union(i, j);
            }
        }
    }
    const cnt = {};
    const mp = {};
    for (let i = 0; i < initial.length; i++) {
        const s = new Set();
        for (let j = 0; j < n; j++) {
            if (clean[j] && graph[initial[i]][j] == 1) {
                s.add(find(j));
            }
        }
        for (const root of s) {
            cnt[root] = (cnt[root] || 0) + 1;
        }
        mp[initial[i]] = s;
    }
    let mx = -1;
    let ans = 0;
    for (const [i, s] of Object.entries(mp)) {
        let t = 0;
        for (const root of s) {
            if (cnt[root] == 1) {
                t += size[root];
