--- a/target.fixed.js
+++ b/target.fixed.js
@@ -722,11 +736,11 @@ class HTMLParser extends ParserBase {
     // true, force handling all data as if followed by EOF marker.
     goahead(end) {
         let rawdata = this.rawdata;
-        let i = 0;
+        let i = 0; let j = 0;
         let n = rawdata.length;
         while (i < n) {
             if (this.convert_charrefs && !this.cdata_elem) {
-                let j = rawdata.indexOf('<', i);
+                j = rawdata.indexOf('<', i);
                 if (j < 0) {
                     // if we can't find the next <, either we are at the end
                     // or there's more text incoming.  If the latter is True,
@@ -744,12 +758,12 @@ class HTMLParser extends ParserBase {
             } else {
                 let match = this.interesting.exec(rawdata.slice(i));  // < or &
                 if (match) {
-                    let j = match.index + i;
+                    j = match.index + i;
                 } else {
                     if (this.cdata_elem) {
                         break;
                     }
-                    let j = n;
+                    j = n;
                 }
             }
             if (i < j) {
@@ -1,5 +1,18 @@
 ///// Segment IGNORE BEGIN
 "use strict";
+
+let startsWithString = "";
+function startsWith(prefix, startIndex = 0) {
+    const slicedString = [...startsWithString].slice(startIndex, startIndex + prefix.length);
+    return slicedString.join('') == prefix;
+}
+
+function assert(condition, message) {
+    if (!condition) {
+      throw new Error(message || "Assertion failed");
+    }
+}
+
 const name2codepoint = {
     'AElig':    0x00c6, // latin capital letter AE = latin capital ligature AE, U+00C6 ISOlat1
     // omitted
@@ -761,21 +775,21 @@ class HTMLParser extends ParserBase {
             }
             i = this.updatepos(i, j);
             if (i == n) break;
-            let startswith = rawdata.startsWith;
+            let startswith = startsWith; startsWithString = rawdata; let k = 0;
             if (startswith('<', i)) {
-                if (starttagopen.test(rawdata.slice(i))) { // < + letter
-                    let k = this.parse_starttag(i);
+                if (starttagopen.exec(rawdata.slice(i, i+2))) { // < + letter
+                    k = this.parse_starttag(i);
                 } else if (startswith("</", i)) {
-                    let k = this.parse_endtag(i);
+                    k = this.parse_endtag(i);
                 } else if (startswith("<!--", i)) {
-                    let k = this.parse_comment(i);
+                    k = this.parse_comment(i);
                 } else if (startswith("<?", i)) {
-                    let k = this.parse_pi(i);
+                    k = this.parse_pi(i);
                 } else if (startswith("<!", i)) {
-                    let k = this.parse_html_declaration(i);
+                    k = this.parse_html_declaration(i);
                 } else if ((i + 1) < n) {
                     this.handle_data("<");
-                    let k = i + 1;
+                    k = i + 1;
                 } else {
                     break;
                 }
@@ -783,11 +797,11 @@ class HTMLParser extends ParserBase {
                     if (!end) {
                         break;
                     }
-                    let k = rawdata.indexOf('>', i + 1);
+                    k = rawdata.indexOf('>', i + 1);
                     if (k < 0) {
-                        let k = rawdata.indexOf('<', i + 1);
+                        k = rawdata.indexOf('<', i + 1);
                         if (k < 0) {
-                            let k = i + 1;
+                            k = i + 1;
                         }
                     } else {
                         k += 1;
@@ -804,7 +818,7 @@ class HTMLParser extends ParserBase {
                 if (match) {
                     let name = match[0].slice(2, -1);
                     this.handle_charref(name);
-                    let k = match.index + match[0].length;
+                    k = match.index + match[0].length;
                     if (!startswith(';', k - 1)) {
                         k = k - 1;
                     }
@@ -822,7 +836,7 @@ class HTMLParser extends ParserBase {
                 if (match) {
                     let name = match[1];
                     this.handle_entityref(name);
-                    let k = match.index + match[0].length;
+                    k = match.index + match[0].length;
                     if (!startswith(';', k - 1)) {
                         k = k - 1;
                     }
@@ -833,7 +847,7 @@ class HTMLParser extends ParserBase {
                 if (match) {
                     // match.group() will contain at least 2 chars
                     if (end && match[0] == rawdata.slice(i)) {
-                        let k = match.index + match[0].length;
+                        k = match.index + match[0].length;
                         if (k <= i) {
                             k = n;
                         }
@@ -350,15 +364,15 @@ class ParserBase {
         if (rawdata.slice(i, i + 4) !== '<!--') {
             throw new AssertionError('unexpected call to parse_comment()');
         }
-        let match = _commentclose.search(rawdata, i + 4);
+        const match = _commentclose.exec(rawdata.substring(i + 4));
         if (!match) {
             return -1;
         }
         if (report) {
-            let j = match.start(0);
+            const j = match.index + (i + 4);
             this.handle_comment(rawdata.slice(i + 4, j));
         }
-        return match.end(0);
+        return match.index + match[0].length + (i + 4);
     }
 ///// Segment END
 ///// Segment BEGIN markupbase5 DONE
--- a/target.fixed.js.srcmap
+++ b/target.fixed.js.srcmap
@@ -1680,11 +1681,11 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
     // true, force handling all data as if followed by EOF marker.
     goahead(end) {   // --- py stmt 16001
         let rawdata = this.rawdata;   // --- py stmt 16002
-        let i = 0;   // --- py stmt 16003
+        let i = 0; let j = 0;   // --- py stmt 16003
         let n = rawdata.length;   // --- py stmt 16004
         while (i < n) {   // --- py stmt 16005
             if (this.convert_charrefs && !this.cdata_elem) {   // --- py stmt 16006
-                let j = rawdata.indexOf('<', i);   // --- py stmt 16007
+                j = rawdata.indexOf('<', i);   // --- py stmt 16007
                 if (j < 0) {   // --- py stmt 16008
                     // if we can't find the next <, either we are at the end
                     // or there's more text incoming.  If the latter is True,
@@ -1702,12 +1703,12 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
             } else {   // --- py stmt 16013
                 let match = this.interesting.exec(rawdata.slice(i));  // < or &   // --- py stmt 16014
                 if (match) {   // --- py stmt 16015
-                    let j = match.index + i;   // --- py stmt 16016
+                    j = match.index + i;   // --- py stmt 16016
                 } else {   // --- py stmt 16017
                     if (this.cdata_elem) {   // --- py stmt 16018
                         break;   // --- py stmt 16019
                     }
-                    let j = n;   // --- py stmt 16020
+                    j = n;   // --- py stmt 16020
                 }
             }
             if (i < j) {   // --- py stmt 16021
@@ -1719,21 +1720,21 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
             }
             i = this.updatepos(i, j);   // --- py stmt 16026
             if (i == n) break;   // --- py stmt 16027
-            let startswith = rawdata.startsWith;   // --- py stmt 16028
+            let startswith = startsWith; startsWithString = rawdata; let k = 0;   // --- py stmt 16028
             if (startswith('<', i)) {   // --- py stmt 16029
-                if (starttagopen.test(rawdata.slice(i))) { // < + letter   // --- py stmt 16030
-                    let k = this.parse_starttag(i);   // --- py stmt 16031
+                if (starttagopen.exec(rawdata.slice(i, i+2))) { // < + letter   // --- py stmt 16030
+                    k = this.parse_starttag(i);   // --- py stmt 16031
                 } else if (startswith("</", i)) {   // --- py stmt 16032
-                    let k = this.parse_endtag(i);   // --- py stmt 16033
+                    k = this.parse_endtag(i);   // --- py stmt 16033
                 } else if (startswith("<!--", i)) {   // --- py stmt 16034
-                    let k = this.parse_comment(i);   // --- py stmt 16035
+                    k = this.parse_comment(i);   // --- py stmt 16035
                 } else if (startswith("<?", i)) {   // --- py stmt 16036
-                    let k = this.parse_pi(i);   // --- py stmt 16037
+                    k = this.parse_pi(i);   // --- py stmt 16037
                 } else if (startswith("<!", i)) {   // --- py stmt 16038
-                    let k = this.parse_html_declaration(i);   // --- py stmt 16039
+                    k = this.parse_html_declaration(i);   // --- py stmt 16039
                 } else if ((i + 1) < n) {   // --- py stmt 16040
                     this.handle_data("<");   // --- py stmt 16041
-                    let k = i + 1;   // --- py stmt 16042
+                    k = i + 1;   // --- py stmt 16042
                 } else {   // --- py stmt 16043
                     break;   // --- py stmt 16044
                 }
@@ -1741,11 +1742,11 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
                     if (!end) {   // --- py stmt 16046
                         break;   // --- py stmt 16047
                     }
-                    let k = rawdata.indexOf('>', i + 1);   // --- py stmt 16048
+                    k = rawdata.indexOf('>', i + 1);   // --- py stmt 16048
                     if (k < 0) {   // --- py stmt 16049
-                        let k = rawdata.indexOf('<', i + 1);   // --- py stmt 16050
+                        k = rawdata.indexOf('<', i + 1);   // --- py stmt 16050
                         if (k < 0) {   // --- py stmt 16051
-                            let k = i + 1;   // --- py stmt 16052
+                            k = i + 1;   // --- py stmt 16052
                         }
                     } else {   // --- py stmt 16053
                         k += 1;   // --- py stmt 16054
@@ -1762,7 +1763,7 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
                 if (match) {   // --- py stmt 16062
                     let name = match[0].slice(2, -1);   // --- py stmt 16063
                     this.handle_charref(name);   // --- py stmt 16064
-                    let k = match.index + match[0].length;   // --- py stmt 16065
+                    k = match.index + match[0].length;   // --- py stmt 16065
                     if (!startswith(';', k - 1)) {   // --- py stmt 16066
                         k = k - 1;   // --- py stmt 16067
                     }
@@ -1780,7 +1781,7 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
                 if (match) {   // --- py stmt 16077
                     let name = match[1];   // --- py stmt 16078
                     this.handle_entityref(name);   // --- py stmt 16079
-                    let k = match.index + match[0].length;   // --- py stmt 16080
+                    k = match.index + match[0].length;   // --- py stmt 16080
                     if (!startswith(';', k - 1)) {   // --- py stmt 16081
                         k = k - 1;   // --- py stmt 16082
                     }
@@ -1791,7 +1792,7 @@ class HTMLParser extends ParserBase {   // --- py stmt 15001
                 if (match) {   // --- py stmt 16086
                     // match.group() will contain at least 2 chars
                     if (end && match[0] == rawdata.slice(i)) {   // --- py stmt 16087
-                        let k = match.index + match[0].length;   // --- py stmt 16088
+                        k = match.index + match[0].length;   // --- py stmt 16088
                         if (k <= i) {   // --- py stmt 16089
                             k = n;   // --- py stmt 16090
                         }
@@ -1316,15 +1317,15 @@ class ParserBase {   // --- py stmt 6001
         if (rawdata.slice(i, i + 4) !== '<!--') {   // --- py stmt 8020
             throw new AssertionError('unexpected call to parse_comment()');   // --- py stmt 8021
         }
-        let match = _commentclose.search(rawdata, i + 4);   // --- py stmt 8022
+        const match = _commentclose.exec(rawdata.substring(i + 4));   // --- py stmt 8022
         if (!match) {   // --- py stmt 8023
             return -1;   // --- py stmt 8024
         }
         if (report) {   // --- py stmt 8025
-            let j = match.start(0);   // --- py stmt 8026
+            const j = match.index + (i + 4);   // --- py stmt 8026
             this.handle_comment(rawdata.slice(i + 4, j));   // --- py stmt 8027
         }
-        return match.end(0);   // --- py stmt 8028
+        return match.index + match[0].length + (i + 4);   // --- py stmt 8028
     }
 
     // TRANSLATION NOTE: this function is inside a class `ParserBase.`
--- a/target.fixed.js.traceconfig.json
+++ b/target.fixed.js.traceconfig.json
@@ -1,4 +1,4 @@
 {
-  "disable_src_lines": [],
+  "disable_src_lines": [167,627,630,706,741,968,211,682,683,691],
   "trace_cmp": []
 }
\ No newline at end of file