--- a/target.fixed.js
+++ b/target.fixed.js
@@ -61,7 +61,7 @@ function binary_2s_complement(maxDigits = 10) {
         answer.unshift('1');
     }
 
-    let problem = `2's complement of ${question} = $`;
+    let problem = `2's complement of $${question} = $`;
     let solution = answer.join('').replace(/^0+/, '');
     return [problem, `$${solution}$`];
 }
@@ -88,8 +88,8 @@ function binary_to_decimal(max_dig = 10) {
 ///// Segment BEGIN p5 DONE
 function binary_to_hex(max_dig = 10) {
     let problem = [...Array(Math.floor(Math.random() * max_dig) + 1)].map(() => Math.floor(Math.random() * 2)).join('');
-    let solution = `$${parseInt(problem, 2).toString(16)}$`;
-    return `$${problem}$`, solution;
+    let solution = `$0x${parseInt(problem, 2).toString(16)}$`;
+    return [`$${problem}$`, solution];
 }
 ///// Segment END
 
@@ -113,8 +113,8 @@ function decimal_to_binary(max_dec = 99) {
     const a = Math.floor(Math.random() * max_dec) + 1;
     const b = a.toString(2);
 
-    const problem = `Binary of ${a} = `;
-    const solution = `${b}`;
+    const problem = `Binary of $${a} = $`;
+    const solution = `$${b}$`;
     return [problem, solution];
 }
 ///// Segment END
@@ -122,10 +122,10 @@ function decimal_to_binary(max_dec = 99) {
 ///// Segment BEGIN p8 DONE
 function decimal_to_hexadeci(max_dec = 1000) {
     const a = Math.floor(Math.random() * (max_dec + 1));
-    const b = a.toString(16);
+    const b = `0x` + a.toString(16);
 
-    const problem = `Hexadecimal of ${a} = `;
-    const solution = `${b}`;
+    const problem = `Hexadecimal of $${a} = $`;
+    const solution = `$${b}$`;
 
     return [problem, solution];
 }
@@ -135,8 +135,8 @@ function decimal_to_hexadeci(max_dec = 1000) {
 function decimal_to_octal(max_decimal = 4096) {
     const x = Math.floor(Math.random() * (max_decimal + 1));
 
-    const problem = `The decimal number ${x} in octal is: `;
-    const solution = `${x.toString(8)}`;
+    const problem = `The decimal number $${x}$ in octal is: `;
+    const solution = `$0o${x.toString(8)}$`;
 
     return [problem, solution];
 }
@@ -161,7 +161,7 @@ function fibonacci_series(min_no = 1) {
 
     const fibList = createFibList(n);
 
-    const problem = `The Fibonacci Series of the first ${n} numbers is ?`;
+    const problem = `The Fibonacci Series of the first $${n}$ numbers is ?`;
     const solution = fibList.join(", ");
     return [problem, `$${solution}$`];
 }
--- a/target.fixed.js.srcmap
+++ b/target.fixed.js.srcmap
@@ -184,7 +184,7 @@ function binary_2s_complement(maxDigits = 10) {   // --- py stmt 1001
         answer.unshift('1');   // --- py stmt 1017
     }
 
-    let problem = `2's complement of ${question} = $`;   // --- py stmt 1018
+    let problem = `2's complement of $${question} = $`;   // --- py stmt 1018
     let solution = answer.join('').replace(/^0+/, '');   // --- py stmt 1019
     return [problem, `$${solution}$`];   // --- py stmt 1020
 }
@@ -205,8 +205,8 @@ function binary_to_decimal(max_dig = 10) {   // --- py stmt 3001
 
 function binary_to_hex(max_dig = 10) {   // --- py stmt 4001
     let problem = [...Array(Math.floor(Math.random() * max_dig) + 1)].map(() => Math.floor(Math.random() * 2)).join('');   // --- py stmt 4002
-    let solution = `$${parseInt(problem, 2).toString(16)}$`;   // --- py stmt 4003
-    return `$${problem}$`, solution;   // --- py stmt 4004
+    let solution = `$0x${parseInt(problem, 2).toString(16)}$`;   // --- py stmt 4003
+    return [`$${problem}$`, solution];   // --- py stmt 4004
 }
 
 function decimal_to_bcd(max_number = 10000) {   // --- py stmt 5001
@@ -226,8 +226,8 @@ function decimal_to_binary(max_dec = 99) {   // --- py stmt 6001
     const a = Math.floor(Math.random() * max_dec) + 1;   // --- py stmt 6002
     const b = a.toString(2);   // --- py stmt 6003
 
-    const problem = `Binary of ${a} = `;   // --- py stmt 6004
-    const solution = `${b}`;   // --- py stmt 6005
+    const problem = `Binary of $${a} = $`;   // --- py stmt 6004
+    const solution = `$${b}$`;   // --- py stmt 6005
     return [problem, solution];   // --- py stmt 6006
 }
 
@@ -235,8 +235,8 @@ function decimal_to_hexadeci(max_dec = 1000) {   // --- py stmt 7001
     const a = Math.floor(Math.random() * (max_dec + 1));   // --- py stmt 7002
     const b = a.toString(16);   // --- py stmt 7003
 
-    const problem = `Hexadecimal of ${a} = `;   // --- py stmt 7004
-    const solution = `${b}`;   // --- py stmt 7005
+    const problem = `Hexadecimal of $${a} = $`;   // --- py stmt 7004
+    const solution = `$${b}$`;   // --- py stmt 7005
 
     return [problem, solution];   // --- py stmt 7006
 }
@@ -244,8 +244,8 @@ function decimal_to_hexadeci(max_dec = 1000) {   // --- py stmt 7001
 function decimal_to_octal(max_decimal = 4096) {   // --- py stmt 8001
     const x = Math.floor(Math.random() * (max_decimal + 1));   // --- py stmt 8002
 
-    const problem = `The decimal number ${x} in octal is: `;   // --- py stmt 8003
-    const solution = `${x.toString(8)}`;   // --- py stmt 8004
+    const problem = `The decimal number $${x}$ in octal is: `;   // --- py stmt 8003
+    const solution = `$0o${x.toString(8)}$`;   // --- py stmt 8004
 
     return [problem, solution];   // --- py stmt 8005
 }
@@ -268,7 +268,7 @@ function fibonacci_series(min_no = 1) {   // --- py stmt 9001
 
     const fibList = createFibList(n);   // --- py stmt 9012
 
-    const problem = `The Fibonacci Series of the first ${n} numbers is ?`;   // --- py stmt 9013
+    const problem = `The Fibonacci Series of the first $${n}$ numbers is ?`;   // --- py stmt 9013
     const solution = fibList.join(", ");   // --- py stmt 9014
     return [problem, `$${solution}$`];   // --- py stmt 9015
 }
--- a/target.fixed.js.traceconfig.json
+++ b/target.fixed.js.traceconfig.json
@@ -1,4 +1,4 @@
 {
-  "disable_src_lines": [],
+  "disable_src_lines": [173],
   "trace_cmp": []
 }
\ No newline at end of file
