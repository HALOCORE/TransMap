### Python
import re   # --- py stmt 1
from functools import reduce   # --- py stmt 2

_SPACE_PATTERN = re.compile("\\s+")   # --- py stmt 3

class StringDistance:   # --- py stmt 4
    def distance(self, s0, s1):   # --- py stmt 5
        raise NotImplementedError()   # --- py stmt 6

class NormalizedStringDistance(StringDistance):   # --- py stmt 7
    def distance(self, s0, s1):   # --- py stmt 8
        raise NotImplementedError()   # --- py stmt 9

class MetricStringDistance(StringDistance):   # --- py stmt 10
    def distance(self, s0, s1):   # --- py stmt 11
        raise NotImplementedError()   # --- py stmt 12

class StringSimilarity:   # --- py stmt 13
    def similarity(self, s0, s1):   # --- py stmt 14
        raise NotImplementedError()   # --- py stmt 15

class NormalizedStringSimilarity(StringSimilarity):   # --- py stmt 16
    def similarity(self, s0, s1):   # --- py stmt 17
        raise NotImplementedError()   # --- py stmt 18

class ShingleBased:   # --- py stmt 19

    def __init__(self, k=3):   # --- py stmt 20
        self.k = k   # --- py stmt 21

    def get_k(self):   # --- py stmt 22
        return self.k   # --- py stmt 23

    def get_profile(self, string):   # --- py stmt 24
        shingles = dict()   # --- py stmt 25
        no_space_str = _SPACE_PATTERN.sub(" ", string)   # --- py stmt 26
        for i in range(len(no_space_str) - self.k + 1):   # --- py stmt 27
            shingle = no_space_str[i:i + self.k]   # --- py stmt 28
            old = shingles.get(shingle)   # --- py stmt 29
            if old:   # --- py stmt 30
                shingles[str(shingle)] = int(old + 1)   # --- py stmt 31
            else:   # --- py stmt 32
                shingles[str(shingle)] = 1   # --- py stmt 33
        return shingles   # --- py stmt 34

class SorensenDice(ShingleBased, NormalizedStringDistance, NormalizedStringSimilarity):   # --- py stmt 35

    def __init__(self, k=3):   # --- py stmt 36
        super().__init__(k)   # --- py stmt 37

    def distance(self, s0, s1):   # --- py stmt 38
        return 1.0 - self.similarity(s0, s1)   # --- py stmt 39

    def similarity(self, s0, s1):   # --- py stmt 40
        if s0 is None:   # --- py stmt 41
            raise TypeError("Argument s0 is NoneType.")   # --- py stmt 42
        if s1 is None:   # --- py stmt 43
            raise TypeError("Argument s1 is NoneType.")   # --- py stmt 44
        if s0 == s1:   # --- py stmt 45
            return 1.0   # --- py stmt 46
        union = set()   # --- py stmt 47
        profile0, profile1 = self.get_profile(s0), self.get_profile(s1)   # --- py stmt 48
        for k in profile0.keys():   # --- py stmt 49
            union.add(k)   # --- py stmt 50
        for k in profile1.keys():   # --- py stmt 51
            union.add(k)   # --- py stmt 52
        inter = int(len(profile0.keys()) + len(profile1.keys()) - len(union))   # --- py stmt 53
        return 2.0 * inter / (len(profile0) + len(profile1))   # --- py stmt 54

def default_insertion_cost(char):   # --- py stmt 55
    return 1.0   # --- py stmt 56

def default_deletion_cost(char):   # --- py stmt 57
    return 1.0   # --- py stmt 58

def default_substitution_cost(char_a, char_b):   # --- py stmt 59
    return 1.0   # --- py stmt 60

class WeightedLevenshtein(StringDistance):   # --- py stmt 61
    def __init__(self,
                 substitution_cost_fn=default_substitution_cost,
                 insertion_cost_fn=default_insertion_cost,
                 deletion_cost_fn=default_deletion_cost,
                 ):   # --- py stmt 62
        self.substitution_cost_fn = substitution_cost_fn   # --- py stmt 63
        self.insertion_cost_fn = insertion_cost_fn   # --- py stmt 64
        self.deletion_cost_fn = deletion_cost_fn   # --- py stmt 65

    def distance(self, s0, s1):   # --- py stmt 66
        if s0 is None:   # --- py stmt 67
            raise TypeError("Argument s0 is NoneType.")   # --- py stmt 68
        if s1 is None:   # --- py stmt 69
            raise TypeError("Argument s1 is NoneType.")   # --- py stmt 70
        if s0 == s1:   # --- py stmt 71
            return 0.0   # --- py stmt 72
        if len(s0) == 0:   # --- py stmt 73
            return reduce(lambda cost, char: cost + self.insertion_cost_fn(char), s1, 0)   # --- py stmt 74
        if len(s1) == 0:   # --- py stmt 75
            return reduce(lambda cost, char: cost + self.deletion_cost_fn(char), s0, 0)   # --- py stmt 76
        v0, v1 = [0.0] * (len(s1) + 1), [0.0] * (len(s1) + 1)   # --- py stmt 77
        v0[0] = 0   # --- py stmt 78
        for i in range(1, len(v0)):   # --- py stmt 79
            v0[i] = v0[i - 1] + self.insertion_cost_fn(s1[i - 1])   # --- py stmt 80
        for i in range(len(s0)):   # --- py stmt 81
            s0i = s0[i]   # --- py stmt 82
            deletion_cost = self.deletion_cost_fn(s0i)   # --- py stmt 83
            v1[0] = v0[0] + deletion_cost   # --- py stmt 84
            for j in range(len(s1)):   # --- py stmt 85
                s1j = s1[j]   # --- py stmt 86
                cost = 0   # --- py stmt 87
                if s0i != s1j:   # --- py stmt 88
                    cost = self.substitution_cost_fn(s0i, s1j)   # --- py stmt 89
                insertion_cost = self.insertion_cost_fn(s1j)   # --- py stmt 90
                v1[j + 1] = min(v1[j] + insertion_cost, v0[j + 1] + deletion_cost, v0[j] + cost)   # --- py stmt 91
            v0, v1 = v1, v0   # --- py stmt 92
        return v0[len(s1)]   # --- py stmt 93




### JavaScript
"use strict";
class StringDistance {   // --- py stmt 4
    distance(s0, s1) {   // --- py stmt 5
        throw new Error("Not implemented");   // --- py stmt 6
    }
}

class NormalizedStringDistance extends StringDistance {   // --- py stmt 7
    distance(s0, s1) {   // --- py stmt 8
        throw new Error("Not implemented");   // --- py stmt 9
    }
}

class MetricStringDistance extends StringDistance {   // --- py stmt 10
    distance(s0, s1) {   // --- py stmt 11
        throw new Error("Not implemented");   // --- py stmt 12
    }
}

class StringSimilarity {   // --- py stmt 13
    similarity(s0, s1) {   // --- py stmt 14
        throw new Error("Not implemented");   // --- py stmt 15
    }
}

class NormalizedStringSimilarity extends StringSimilarity {   // --- py stmt 16
    similarity(s0, s1) {   // --- py stmt 17
        throw new Error("Not implemented");   // --- py stmt 18
    }
}




class ShingleBased {   // --- py stmt 19
    constructor(k = 3) {   // --- py stmt 20
        this.k = k;   // --- py stmt 21
    }

    get_k() {   // --- py stmt 22
        return this.k;   // --- py stmt 23
    }

    get_profile(string) {   // --- py stmt 24
        let shingles = {};   // --- py stmt 25
        let no_space_str = string.replaceAll(/\s+/g, " ");   // --- py stmt 26
        for (let i = 0; i < no_space_str.length - this.k + 1; i++) {   // --- py stmt 27
            let shingle = no_space_str.substring(i, i + this.k);   // --- py stmt 28
            let old = shingles[shingle];   // --- py stmt 29
            if (old) {   // --- py stmt 30
                shingles[shingle] = parseInt(old + 1);   // --- py stmt 31
            } else {   // --- py stmt 32
                shingles[shingle] = 1;   // --- py stmt 33
            }
        }
        return shingles;   // --- py stmt 34
    }
}

class SorensenDice extends ShingleBased {   // --- py stmt 35
    constructor(k = 3) {   // --- py stmt 36
        super(k);   // --- py stmt 37
    }

    distance(s0, s1) {   // --- py stmt 38
        return 1.0 - this.similarity(s0, s1);   // --- py stmt 39
    }

    similarity(s0, s1) {   // --- py stmt 40
        if (s0 === null) {   // --- py stmt 41
            throw new TypeError("Argument s0 is NoneType.");   // --- py stmt 42
        }
        if (s1 === null) {   // --- py stmt 43
            throw new TypeError("Argument s1 is NoneType.");   // --- py stmt 44
        }
        if (s0 === s1) {   // --- py stmt 45
            return 1.0;   // --- py stmt 46
        }
        let union = new Set();   // --- py stmt 47
        let profile0 = this.get_profile(s0);   // --- py stmt 48
        let profile1 = this.get_profile(s1);   // --- py stmt 48
        for (let k of Object.keys(profile0)) {   // --- py stmt 49
            union.add(k);   // --- py stmt 50
        }
        for (let k of Object.keys(profile1)) {   // --- py stmt 51
            union.add(k);   // --- py stmt 52
        }
        let inter = parseInt(Object.keys(profile0).length + Object.keys(profile1).length - union.size);   // --- py stmt 53
        return 2.0 * inter / (Object.keys(profile0).length + Object.keys(profile1).length);   // --- py stmt 54
    }
}





function default_insertion_cost(char) {   // --- py stmt 55
    return 1.0;   // --- py stmt 56
}

function default_deletion_cost(char) {   // --- py stmt 57
    return 1.0;   // --- py stmt 58
}

function default_substitution_cost(char_a, char_b) {   // --- py stmt 59
    return 1.0;   // --- py stmt 60
}

class WeightedLevenshtein {   // --- py stmt 61

    constructor(substitution_cost_fn = default_substitution_cost,
                insertion_cost_fn = default_insertion_cost,
                deletion_cost_fn = default_deletion_cost,
                ) {   // --- py stmt 62
        this.substitution_cost_fn = substitution_cost_fn;   // --- py stmt 63
        this.insertion_cost_fn = insertion_cost_fn;   // --- py stmt 64
        this.deletion_cost_fn = deletion_cost_fn;   // --- py stmt 65

    }

    distance(s0, s1) {   // --- py stmt 66
        if (s0 === null) {   // --- py stmt 67
            throw new TypeError("Argument s0 is NoneType.");   // --- py stmt 68
        }
        if (s1 === null) {   // --- py stmt 69
            throw new TypeError("Argument s1 is NoneType.");   // --- py stmt 70
        }
        if (s0 === s1) {   // --- py stmt 71
            return 0.0;   // --- py stmt 72
        }
        if (s0.length === 0) {   // --- py stmt 73
            return s1.split("").reduce((cost, char) => cost + this.insertion_cost_fn(char), 0);   // --- py stmt 74
        }
        if (s1.length === 0) {   // --- py stmt 75
            return s0.split("").reduce((cost, char) => cost + this.deletion_cost_fn(char), 0);   // --- py stmt 76
        }
        let v0 = [0.0].concat(Array(s1.length).fill(0.0));   // --- py stmt 77
        let v1 = [0.0].concat(Array(s1.length).fill(0.0));   // --- py stmt 77

        v0[0] = 0;   // --- py stmt 78
        for (let i = 1; i < v0.length; i++) {   // --- py stmt 79
            v0[i] = v0[i - 1] + this.insertion_cost_fn(s1[i - 1]);   // --- py stmt 80
        }
        for (let i = 0; i < s0.length; i++) {   // --- py stmt 81
            let s0i = s0[i];   // --- py stmt 82
            let deletion_cost = this.deletion_cost_fn(s0i);   // --- py stmt 83
            v1[0] = v0[0] + deletion_cost;   // --- py stmt 84

            for (let j = 0; j < s1.length; j++) {   // --- py stmt 85
                let s1j = s1[j];   // --- py stmt 86
                let cost = 0;   // --- py stmt 87
                if (s0i !== s1j) {   // --- py stmt 88
                    cost = this.substitution_cost_fn(s0i, s1j);   // --- py stmt 89
                }
                let insertion_cost = this.insertion_cost_fn(s1j);   // --- py stmt 90
                v1[j + 1] = Math.min(v1[j] + insertion_cost, v0[j + 1] + deletion_cost, v0[j] + cost);   // --- py stmt 91
            }
            v0 = v1;   // --- py stmt 92
            v1 = [0.0].concat(Array(s1.length).fill(0.0));   // --- py stmt 92
        }
        return v0[s1.length];   // --- py stmt 93
    }
}