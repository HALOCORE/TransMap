--- a/target.fixed.js
+++ b/target.fixed.js
@@ -37,7 +59,7 @@ function heappushpop(heap, item) {
 
 function heapify(x) {
     let n = x.length;
-    for (let i = Math.floor(n / 2); i >= 0; i--) {
+    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
         _siftup(x, i);
     }
 }
@@ -200,8 +234,8 @@ function* merge(...iterables) {
 function nsmallest(n, iterable) {
     if (n === 1) {
         const it = iterable[Symbol.iterator]();
-        const sentinel = {};
-        const result = Math.min(...it, sentinel);
+        const sentinel = Infinity;
+        const result = Math.min(...it);
         return (result === sentinel) ? [] : [result];
     }
 
@@ -229,7 +263,7 @@ function nsmallest(n, iterable) {
     for (const elem of it) {
         if (elem < top) {
             _heapreplace(result, [elem, order]);
-            [top, order] = result[0];
+            let _order = 0; [top, _order] = result[0];
             order += 1;
         }
     }
@@ -242,8 +276,8 @@ function nsmallest(n, iterable) {
 function nlargest(n, iterable) {
     if (n === 1) {
         const it = iterable[Symbol.iterator]();
-        const sentinel = {};
-        const result = Math.max(...it, sentinel);
+        const sentinel = Infinity;
+        const result = Math.max(...it);
         return (result === sentinel) ? [] : [result];
     }
 
@@ -258,7 +292,8 @@ function nlargest(n, iterable) {
     }
 
     const it = iterable[Symbol.iterator]();
-    const result = Array.from(it, (elem, i) => [elem, i]).slice(-n);
+    const result = [...iterable].map((elem, i) => [elem, -i]).slice(0, n);
+    for (let i=0;i<n;i++) it.next();
     if (!result.length) {
         return result;
     }
@@ -269,7 +304,7 @@ function nlargest(n, iterable) {
     for (const elem of it) {
         if (top < elem) {
             _heapreplace(result, [elem, order]);
-            [top, _order] = result[0];
+            let _order = 0; [top, _order] = result[0];
             order -= 1;
         }
     }
@@ -140,7 +162,7 @@ function _siftup_max(heap, pos) {
 ///// Segment END
 
 ///// Segment BEGIN merge DONE
-function* merge(...iterables) {
+function* merge(reverse, ...iterables) {
     let h = [];
     let h_append = h.push.bind(h);
 
@@ -161,36 +183,48 @@ function* merge(...iterables) {
         let it = iterables[order][Symbol.iterator]();
         try {
             let next = it.next.bind(it);
-            h_append([next().value, order * direction, next]);
+            let next_elem = next();
+            if (next_elem.done) continue;
+            h_append([next_elem.value, order * direction, next]);
         } catch (e) {
-            if (e instanceof StopIteration) {
-                // pass
-            } else {
-                throw e;
-            }
+            // pass
+            throw e;
         }
     }
     _heapify(h);
     while (h.length > 1) {
         try {
             while (true) {
-                let [value, order, next] = s = h[0];
+                let s = h[0];
+                let [value, order, next] = s;
                 yield value;
-                s[0] = next().value;
+                let next_elem = next();
+                let done = next_elem.done;
+                if (done) {
+                    _heappop(h);
+                    break;
+                }
+                s[0] = next_elem.value;
                 _heapreplace(h, s);
             }
         } catch (e) {
-            if (e instanceof StopIteration) {
-                _heappop(h);
-            } else {
-                throw e;
-            }
+            throw e;
         }
     }
     if (h.length > 0) {
         let [value, order, next] = h[0];
         yield value;
-        yield* next.__self__;
+        yield* (function* next_wrap() {
+            while(true) {
+                let next_elem = next();
+                let val = next_elem.value;
+                let done = next_elem.done;
+                if (done) {
+                    break;
+                }
+                yield val;
+            };
+        })();
     }
     return;
 }
@@ -1,5 +1,27 @@
 ///// Segment IGNORE BEGIN
 "use strict";
+
+function compare(a, b) {
+    if (typeof a === 'string' && typeof b === 'string') {
+      return a.localeCompare(b);
+    } else if (typeof a === 'number' && typeof b === 'number') {
+      return a - b;
+    } else if (Array.isArray(a) && Array.isArray(b)) {
+      if (a.length !== b.length) {
+        return a.length - b.length;
+      } else {
+        for (let i = 0; i < a.length; i++) {
+          const comparison = compare(a[i], b[i]);
+          if (comparison !== 0) {
+            return comparison;
+          }
+        }
+        return 0;
+      }
+    } else {
+      throw new Error('Cannot compare different types');
+    }
+  }
 ///// Segment IGNORE END
 ///// Segment BEGIN Basic DONE
 const __all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge', 'nlargest', 'nsmallest', 'heappushpop'];
@@ -75,7 +97,7 @@ function _siftdown(heap, startpos, pos) {
     while (pos > startpos) {
         let parentpos = (pos - 1) >> 1;
         let parent = heap[parentpos];
-        if (newitem < parent) {
+        if (compare(parent, newitem) > 0) {
             heap[pos] = parent;
             pos = parentpos;
             continue;
--- a/target.fixed.js.srcmap
+++ b/target.fixed.js.srcmap
@@ -257,7 +257,7 @@ function heappushpop(heap, item) {   // --- py stmt 18
 
 function heapify(x) {   // --- py stmt 23
     let n = x.length;   // --- py stmt 24
-    for (let i = Math.floor(n / 2); i >= 0; i--) {   // --- py stmt 25
+    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {   // --- py stmt 25
         _siftup(x, i);   // --- py stmt 26
     }
 }
@@ -412,8 +424,8 @@ function* merge(...iterables) {   // --- py stmt 3001
 function nsmallest(n, iterable) {   // --- py stmt 4001
     if (n === 1) {   // --- py stmt 4002
         const it = iterable[Symbol.iterator]();   // --- py stmt 4003
-        const sentinel = {};   // --- py stmt 4004
-        const result = Math.min(...it, sentinel);   // --- py stmt 4005
+        const sentinel = Infinity;   // --- py stmt 4004
+        const result = Math.min(...it);   // --- py stmt 4005
         return (result === sentinel) ? [] : [result];   // --- py stmt 4006
     }
 
@@ -441,7 +453,7 @@ function nsmallest(n, iterable) {   // --- py stmt 4001
     for (const elem of it) {   // --- py stmt 4022
         if (elem < top) {   // --- py stmt 4023
             _heapreplace(result, [elem, order]);   // --- py stmt 4024
-            [top, order] = result[0];   // --- py stmt 4025
+            let _order = 0; [top, _order] = result[0];   // --- py stmt 4025
             order += 1;   // --- py stmt 4026
         }
     }
@@ -452,8 +464,8 @@ function nsmallest(n, iterable) {   // --- py stmt 4001
 function nlargest(n, iterable) {   // --- py stmt 5001
     if (n === 1) {   // --- py stmt 5002
         const it = iterable[Symbol.iterator]();   // --- py stmt 5003
-        const sentinel = {};   // --- py stmt 5004
-        const result = Math.max(...it, sentinel);   // --- py stmt 5005
+        const sentinel = Infinity;   // --- py stmt 5004
+        const result = Math.max(...it);   // --- py stmt 5005
         return (result === sentinel) ? [] : [result];   // --- py stmt 5006
     }
 
@@ -468,7 +480,8 @@ function nlargest(n, iterable) {   // --- py stmt 5001
     }
 
     const it = iterable[Symbol.iterator]();   // --- py stmt 5014
-    const result = Array.from(it, (elem, i) => [elem, i]).slice(-n);   // --- py stmt 5015
+    const result = [...iterable].map((elem, i) => [elem, -i]).slice(0, n);   // --- py stmt 5015
+    for (let i=0;i<n;i++) it.next();   // --- py stmt 5015
     if (!result.length) {   // --- py stmt 5016
         return result;   // --- py stmt 5017
     }
@@ -479,7 +492,7 @@ function nlargest(n, iterable) {   // --- py stmt 5001
     for (const elem of it) {   // --- py stmt 5022
         if (top < elem) {   // --- py stmt 5023
             _heapreplace(result, [elem, order]);   // --- py stmt 5024
-            [top, _order] = result[0];   // --- py stmt 5025
+            let _order = 0; [top, _order] = result[0];   // --- py stmt 5025
             order -= 1;   // --- py stmt 5026
         }
     }
@@ -354,7 +354,7 @@ function _siftup_max(heap, pos) {   // --- py stmt 2027
     _siftdown_max(heap, startpos, pos);   // --- py stmt 2040
 }
 
-function* merge(...iterables) {   // --- py stmt 3001
+function* merge(reverse=false, ...iterables) {   // --- py stmt 3001
     let h = [];   // --- py stmt 3002
     let h_append = h.push.bind(h);   // --- py stmt 3003
 
@@ -375,36 +375,48 @@ function* merge(...iterables) {   // --- py stmt 3001
         let it = iterables[order][Symbol.iterator]();   // --- py stmt 3013
         try {
             let next = it.next.bind(it);   // --- py stmt 3014
-            h_append([next().value, order * direction, next]);   // --- py stmt 3015
+            let next_elem = next();  // --- py stmt 3015
+            if (next_elem.done) continue;  // --- py stmt 3015
+            h_append([next_elem.value, order * direction, next]);   // --- py stmt 3015
         } catch (e) {
-            if (e instanceof StopIteration) {   // --- py stmt 3016
-                // pass   // --- py stmt 3017
-            } else {
-                throw e;   // --- py stmt 3017
-            }
+            // pass   // --- py stmt 3016
+            throw e;   // --- py stmt 3017
         }
     }
     _heapify(h);   // --- py stmt 3018
     while (h.length > 1) {   // --- py stmt 3019
         try {
             while (true) {
-                let [value, order, next] = s = h[0];   // --- py stmt 3020
+                let s = h[0];   // --- py stmt 3020
+                let [value, order, next] = s;   // --- py stmt 3020
                 yield value;   // --- py stmt 3021
-                s[0] = next().value;   // --- py stmt 3022
+                let next_elem = next();   // --- py stmt 3022
+                let done = next_elem.done;
+                if (done) {   // --- py stmt 3024
+                    _heappop(h);   // --- py stmt 3025
+                    break;   // --- py stmt 3025
+                }
+                s[0] = next_elem.value;   // --- py stmt 3022
                 _heapreplace(h, s);   // --- py stmt 3023
             }
         } catch (e) {
-            if (e instanceof StopIteration) {   // --- py stmt 3024
-                _heappop(h);   // --- py stmt 3025
-            } else {
-                throw e;   // --- py stmt 3025
-            }
+            throw e;   // --- py stmt 3025
         }
     }
     if (h.length > 0) {   // --- py stmt 3026
         let [value, order, next] = h[0];   // --- py stmt 3027
         yield value;   // --- py stmt 3028
-        yield* next.__self__;   // --- py stmt 3029
+        yield* (function* next_wrap() {   // --- py stmt 3029
+            while(true) {
+                let next_elem = next();
+                let val = next_elem.value;
+                let done = next_elem.done;
+                if (done) {
+                    break;
+                }
+                yield val;
+            };
+        })();
     }
     return;   // --- py stmt 3030
 }
@@ -293,7 +293,7 @@ function _siftdown(heap, startpos, pos) {   // --- py stmt 1018
     while (pos > startpos) {   // --- py stmt 1020
         let parentpos = (pos - 1) >> 1;   // --- py stmt 1021
         let parent = heap[parentpos];   // --- py stmt 1022
-        if (newitem < parent) {   // --- py stmt 1023
+        if (compare(parent, newitem) > 0) {   // --- py stmt 1023
             heap[pos] = parent;   // --- py stmt 1024
             pos = parentpos;   // --- py stmt 1025
             continue;   // --- py stmt 1026
--- a/target.fixed.js.traceconfig.json
+++ b/target.fixed.js.traceconfig.json
@@ -1,4 +1,8 @@
 {
-  "disable_src_lines": [],
-  "trace_cmp": []
+  "disable_src_lines": ["148-148"],
+  "trace_cmp": [
+      {"src_lines": ["165-193"], "vars_ignore": ["it", "sentinel"]},
+      {"src_lines": ["200-228"], "vars_ignore": ["it", "sentinel"]},
+      {"src_lines": ["139-144"], "vars_ignore": ["it"]}
+  ]
 }
\ No newline at end of file