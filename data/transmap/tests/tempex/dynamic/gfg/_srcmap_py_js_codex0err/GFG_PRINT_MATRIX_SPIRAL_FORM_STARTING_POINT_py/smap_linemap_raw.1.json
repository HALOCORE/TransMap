{
  "src_anno_stmts": [
    [
      "def f_gold(mat, r, c):",
      [
        1
      ]
    ],
    [
      "  a = 0",
      [
        2
      ]
    ],
    [
      "  b = 2",
      [
        3
      ]
    ],
    [
      "  low_row = 0 if(0 > a)else a",
      [
        4
      ]
    ],
    [
      "  low_column = 0 if(0 > b)else b - 1",
      [
        5
      ]
    ],
    [
      "  high_row = r - 1 if((a + 1)>= r)else a + 1",
      [
        6
      ]
    ],
    [
      "  high_column = c - 1 if((b + 1)>= c)else b + 1",
      [
        7
      ]
    ],
    [
      "  while((low_row > 0 - r and low_column > 0 - c)):",
      [
        8
      ]
    ],
    [
      "    i = low_column + 1",
      [
        9
      ]
    ],
    [
      "    while(i <= high_column and i < c and low_row >= 0):",
      [
        10
      ]
    ],
    [
      "      print(mat[low_row][i], end = \" \")",
      [
        11
      ]
    ],
    [
      "      i += 1",
      [
        12
      ]
    ],
    [
      "    low_row -= 1",
      [
        13
      ]
    ],
    [
      "    i = low_row + 2",
      [
        14
      ]
    ],
    [
      "    while(i <= high_row and i < r and high_column < c):",
      [
        15
      ]
    ],
    [
      "      print(mat[i][high_column], end = \" \")",
      [
        16
      ]
    ],
    [
      "      i += 1",
      [
        17
      ]
    ],
    [
      "    high_column += 1",
      [
        18
      ]
    ],
    [
      "    i = high_column - 2",
      [
        19
      ]
    ],
    [
      "    while(i >= low_column and i >= 0 and high_row < r):",
      [
        20
      ]
    ],
    [
      "      print(mat[high_row][i], end = \" \")",
      [
        21
      ]
    ],
    [
      "      i -= 1",
      [
        22
      ]
    ],
    [
      "    high_row += 1",
      [
        23
      ]
    ],
    [
      "    i = high_row - 2",
      [
        24
      ]
    ],
    [
      "    while(i > low_row and i >= 0 and low_column >= 0):",
      [
        25
      ]
    ],
    [
      "      print(mat[i][low_column], end = \" \")",
      [
        26
      ]
    ],
    [
      "      i -= 1",
      [
        27
      ]
    ],
    [
      "    low_column -= 1",
      [
        28
      ]
    ],
    [
      "  print()",
      [
        29
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(mat, r, c) {",
      [
        1
      ]
    ],
    [
      "  var a = 0;",
      [
        2
      ]
    ],
    [
      "  var b = 2;",
      [
        3
      ]
    ],
    [
      "  var low_row = 0 > a ? 0 : a;",
      [
        4
      ]
    ],
    [
      "  var low_column = 0 > b ? 0 : b - 1;",
      [
        5
      ]
    ],
    [
      "  var high_row = r - 1 >= (a + 1) ? a + 1 : r - 1;",
      [
        6
      ]
    ],
    [
      "  var high_column = c - 1 >= (b + 1) ? b + 1 : c - 1;",
      [
        7
      ]
    ],
    [
      "  while(low_row > 0 - r && low_column > 0 - c) {",
      [
        8
      ]
    ],
    [
      "    var i = low_column + 1;",
      [
        9
      ]
    ],
    [
      "    while(i <= high_column && i < c && low_row >= 0) {",
      [
        10
      ]
    ],
    [
      "      console.log(mat[low_row][i]);",
      [
        11
      ]
    ],
    [
      "      i += 1;",
      [
        12
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    low_row -= 1;",
      [
        13
      ]
    ],
    [
      "    i = low_row + 2;",
      [
        14
      ]
    ],
    [
      "    while(i <= high_row && i < r && high_column < c) {",
      [
        15
      ]
    ],
    [
      "      console.log(mat[i][high_column], end = \" \");",
      [
        16
      ]
    ],
    [
      "      i += 1;",
      [
        17
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    high_column += 1;",
      [
        18
      ]
    ],
    [
      "    i = high_column - 2;",
      [
        19
      ]
    ],
    [
      "    while(i >= low_column && i >= 0 && high_row < r) {",
      [
        20
      ]
    ],
    [
      "      console.log(mat[high_row][i]);",
      [
        21
      ]
    ],
    [
      "      i -= 1;",
      [
        22
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    high_row += 1;",
      [
        23
      ]
    ],
    [
      "    i = high_row - 2;",
      [
        24
      ]
    ],
    [
      "    while(i > low_row && i >= 0 && low_column >= 0) {",
      [
        25
      ]
    ],
    [
      "      console.log(mat[i][low_column]);",
      [
        26
      ]
    ],
    [
      "      i -= 1;",
      [
        27
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    low_column -= 1;",
      [
        28
      ]
    ],
    [
      "  }",
      null
    ],
    [
      "  console.log();",
      [
        29
      ]
    ],
    [
      "}",
      null
    ]
  ]
}