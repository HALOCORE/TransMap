{
  "src_anno_stmts": [
    [
      "def f_gold(mat, n):",
      [
        1
      ]
    ],
    [
      "  diag1_left = 0",
      [
        2
      ]
    ],
    [
      "  diag1_right = 0",
      [
        3
      ]
    ],
    [
      "  diag2_left = 0",
      [
        4
      ]
    ],
    [
      "  diag2_right = 0",
      [
        5
      ]
    ],
    [
      "  i = 0",
      [
        6
      ]
    ],
    [
      "  j = n - 1",
      [
        7
      ]
    ],
    [
      "  while i < n:",
      [
        8
      ]
    ],
    [
      "    if(i < n // 2):",
      [
        9
      ]
    ],
    [
      "      diag1_left += mat[i][i]",
      [
        10
      ]
    ],
    [
      "      diag2_left += mat[j][i]",
      [
        11
      ]
    ],
    [
      "    elif(i > n // 2):",
      [
        12
      ]
    ],
    [
      "      diag1_right += mat[i][i]",
      [
        13
      ]
    ],
    [
      "      diag2_right += mat[j][i]",
      [
        14
      ]
    ],
    [
      "    i += 1",
      [
        15
      ]
    ],
    [
      "    j -= 1",
      [
        16
      ]
    ],
    [
      "  return(diag1_left == diag2_right and diag2_right == diag2_left and diag1_right == diag2_left and diag2_right == mat[n // 2][n // 2])",
      [
        17
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(mat, n) {",
      [
        1
      ]
    ],
    [
      "  let diag1_left = 0;",
      [
        2
      ]
    ],
    [
      "  let diag1_right = 0;",
      [
        3
      ]
    ],
    [
      "  let diag2_left = 0;",
      [
        4
      ]
    ],
    [
      "  let diag2_right = 0;",
      [
        5
      ]
    ],
    [
      "  let i = 0;",
      [
        6
      ]
    ],
    [
      "  let j = n - 1;",
      [
        7
      ]
    ],
    [
      "  while (i < n) {",
      [
        8
      ]
    ],
    [
      "    if (i < n / 2) {",
      [
        9
      ]
    ],
    [
      "      diag1_left += mat[i][i];",
      [
        10
      ]
    ],
    [
      "      diag2_left += mat[j][i];",
      [
        11
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    else if (i > Math.floor(n / 2)) {",
      [
        12
      ]
    ],
    [
      "      diag1_right += mat[i][i];",
      [
        13
      ]
    ],
    [
      "      diag2_right += mat[j][i];",
      [
        14
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    i += 1;",
      [
        15
      ]
    ],
    [
      "    j -= 1;",
      [
        16
      ]
    ],
    [
      "  }",
      null
    ],
    [
      "  return (diag1_left == diag2_right && diag2_right == diag2_left && diag1_right == diag2_left && diag2_right == mat[Math.floor(n / 2)][Math.floor(n / 2)]);",
      [
        17
      ]
    ],
    [
      "}",
      null
    ]
  ]
}