{
  "src_anno_stmts": [
    [
      "def f_gold(a, b):",
      [
        1
      ]
    ],
    [
      "  n = len(a)",
      [
        2
      ]
    ],
    [
      "  m = len(b)",
      [
        3
      ]
    ],
    [
      "  if m == 0: return 1",
      [
        4
      ]
    ],
    [
      "  dp =[[0] *(n + 1)for _ in range(m + 1)]",
      [
        5
      ]
    ],
    [
      "  for i in range(m):",
      [
        6
      ]
    ],
    [
      "    for j in range(i, n):",
      [
        7
      ]
    ],
    [
      "      if i == 0:",
      [
        8
      ]
    ],
    [
      "        if j == 0:",
      [
        9
      ]
    ],
    [
      "          if a[j] == b[i]: dp[i][j] = 1",
      [
        10
      ]
    ],
    [
      "          else: dp[i][j] = 0",
      [
        11
      ]
    ],
    [
      "        elif a[j] == b[i]: dp[i][j] = dp[i][j - 1] + 1",
      [
        12
      ]
    ],
    [
      "        else: dp[i][j] = dp[i][j - 1]",
      [
        13
      ]
    ],
    [
      "      else:",
      [
        14
      ]
    ],
    [
      "        if a[j] == b[i]: dp[i][j] =(dp[i][j - 1] + dp[i - 1][j - 1])",
      [
        15
      ]
    ],
    [
      "        else: dp[i][j] = dp[i][j - 1]",
      [
        16
      ]
    ],
    [
      "  return dp[m - 1][n - 1]",
      [
        17
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(a, b) {",
      [
        1
      ]
    ],
    [
      "  let n = a.length;",
      [
        2
      ]
    ],
    [
      "  let m = b.length;",
      [
        3
      ]
    ],
    [
      "  if (m == 0) return 1;",
      [
        4
      ]
    ],
    [
      "  let dp = new Array(m + 1);",
      [
        5
      ]
    ],
    [
      "  for (let _ = 0; _ < m + 1; _++) {",
      [
        5
      ]
    ],
    [
      "    dp[_] = new Array(n + 1);",
      [
        5
      ]
    ],
    [
      "  }",
      null
    ],
    [
      "  for (let i = 0; i < m; i++) {",
      [
        6
      ]
    ],
    [
      "    for (let j = i; j < n; j++) {",
      [
        7
      ]
    ],
    [
      "      if (i == 0) {",
      [
        8
      ]
    ],
    [
      "        if (j == 0) {",
      [
        9
      ]
    ],
    [
      "          if (a[j] == b[i]) dp[i][j] = 1;",
      [
        10
      ]
    ],
    [
      "          else dp[i][j] = 0;",
      [
        11
      ]
    ],
    [
      "        } else if (a[j] == b[i]) dp[i][j] = dp[i][j - 1] + 1;",
      [
        12
      ]
    ],
    [
      "        else dp[i][j] = dp[i][j - 1];",
      [
        13
      ]
    ],
    [
      "      } else {",
      [
        14
      ]
    ],
    [
      "        if (a[j] == b[i]) dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1];",
      [
        15
      ]
    ],
    [
      "        else dp[i][j] = dp[i][j - 1];",
      [
        16
      ]
    ],
    [
      "      }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "  }",
      null
    ],
    [
      "  return dp[m - 1][n - 1];",
      [
        17
      ]
    ],
    [
      "}",
      null
    ]
  ]
}