
### Python
def f_gold(m, n, x):   # --- py stmt 1
  table =[[0] *(x + 1)for i in range(n + 1)]   # --- py stmt 2
  for j in range(1, min(m + 1, x + 1)): table[1][j] = 1   # --- py stmt 3
  for i in range(2, n + 1):   # --- py stmt 4
    for j in range(1, x + 1):   # --- py stmt 5
      for k in range(1, min(m + 1, j)): table[i][j] += table[i - 1][j - k]   # --- py stmt 6
  return table[- 1][- 1]   # --- py stmt 7

### JavaScript
"use strict";
function f_gold(m, n, x) {   // --- py stmt 1
  let table = [[0] * (x + 1)];   // --- py stmt 2
  for (let i = 0; i < n + 1; i++) {   // --- py stmt 2
    table[i] = [0] * (x + 1);   // --- py stmt 2
  }
  for (let j = 1; j < Math.min(m + 1, x + 1); j++) {   // --- py stmt 3
    table[1][j] = 1;   // --- py stmt 3
  }
  for (let i = 2; i < n + 1; i++) {   // --- py stmt 4
    for (let j = 1; j < x + 1; j++) {   // --- py stmt 5
      for (let k = 1; k < Math.min(m + 1, j); k++) {   // --- py stmt 6
        table[i][j] += table[i - 1][j - k];   // --- py stmt 6
      }
    }
  }
  return table[n][x];   // --- py stmt 7
}



