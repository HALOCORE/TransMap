
### Python
def f_gold(gold, m, n):   # --- py stmt 1
  goldTable =[[0 for i in range(n)] for j in range(m)]   # --- py stmt 2
  for col in range(n - 1, - 1, - 1):   # --- py stmt 3
    for row in range(m):   # --- py stmt 4
      if(col == n - 1): right = 0   # --- py stmt 5
      else: right = goldTable[row][col + 1]   # --- py stmt 6
      if(row == 0 or col == n - 1): right_up = 0   # --- py stmt 7
      else: right_up = goldTable[row - 1][col + 1]   # --- py stmt 8
      if(row == m - 1 or col == n - 1): right_down = 0   # --- py stmt 9
      else: right_down = goldTable[row + 1][col + 1]   # --- py stmt 10
      goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)   # --- py stmt 11
  res = goldTable[0][0]   # --- py stmt 12
  for i in range(1, m): res = max(res, goldTable[i][0])   # --- py stmt 13
  return res   # --- py stmt 14

### JavaScript
"use strict";
function f_gold(gold, m, n) {   // --- py stmt 1
  let goldTable = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]];   // --- py stmt 2
  for (let col = n - 1; col >= 0; col--) {   // --- py stmt 3
    for (let row = 0; row < m; row++) {   // --- py stmt 4
      if (col == n - 1) var right = 0;   // --- py stmt 5
      else right = goldTable[row][col + 1];   // --- py stmt 6
      if (row == 0 || col == n - 1) var right_up = 0;   // --- py stmt 7
      else right_up = goldTable[row - 1][col + 1];   // --- py stmt 8
      if (row == m - 1 || col == n - 1) var right_down = 0;   // --- py stmt 9
      else right_down = goldTable[row + 1][col + 1];   // --- py stmt 10
      goldTable[row][col] = gold[row][col] + Math.max(right, right_up, right_down);   // --- py stmt 11
    }
  }
  let res = goldTable[0][0];   // --- py stmt 12
  for (let i = 1; i < m; i++) res = Math.max(res, goldTable[i][0]);   // --- py stmt 13
  return res;   // --- py stmt 14
}



