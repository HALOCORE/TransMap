{
  "src_anno_stmts": [
    [
      "def f_gold(str):",
      [
        1
      ]
    ],
    [
      "  n = len(str)",
      [
        2
      ]
    ],
    [
      "  dp =[[0 for i in range(n + 1)] for j in range(n + 1)]",
      [
        3
      ]
    ],
    [
      "  for i in range(1, n + 1):",
      [
        4
      ]
    ],
    [
      "    for j in range(1, n + 1):",
      [
        5
      ]
    ],
    [
      "      if(str[i - 1] == str[j - 1] and i != j): dp[i][j] = 1 + dp[i - 1][j - 1]",
      [
        6
      ]
    ],
    [
      "      else: dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])",
      [
        7
      ]
    ],
    [
      "  res = ''",
      [
        8
      ]
    ],
    [
      "  i = n",
      [
        9
      ]
    ],
    [
      "  j = n",
      [
        10
      ]
    ],
    [
      "  while(i > 0 and j > 0):",
      [
        11
      ]
    ],
    [
      "    if(dp[i][j] == dp[i - 1][j - 1] + 1):",
      [
        12
      ]
    ],
    [
      "      res += str[i - 1]",
      [
        13
      ]
    ],
    [
      "      i -= 1",
      [
        14
      ]
    ],
    [
      "      j -= 1",
      [
        15
      ]
    ],
    [
      "    elif(dp[i][j] == dp[i - 1][j]): i -= 1",
      [
        16
      ]
    ],
    [
      "    else: j -= 1",
      [
        17
      ]
    ],
    [
      "  res = ''.join(reversed(res))",
      [
        18
      ]
    ],
    [
      "  return res",
      [
        19
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(str) {",
      [
        1
      ]
    ],
    [
      "  var n = str.length;",
      [
        2
      ]
    ],
    [
      "  var dp = [[0], [0]];",
      [
        3
      ]
    ],
    [
      "  for (var i = 1; i <= n; i++) {",
      [
        4
      ]
    ],
    [
      "    for (var j = 1; j <= n; j++) {",
      [
        5
      ]
    ],
    [
      "      if (str[i - 1] == str[j - 1] && i != j) dp[i][j] = 1 + dp[i - 1][j - 1];",
      [
        6
      ]
    ],
    [
      "      else dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);",
      [
        7
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "  }",
      null
    ],
    [
      "  var res = \"\";",
      [
        8
      ]
    ],
    [
      "  var i = n;",
      [
        9
      ]
    ],
    [
      "  var j = n;",
      [
        10
      ]
    ],
    [
      "  while (i > 0 && j > 0) {",
      [
        11
      ]
    ],
    [
      "    if (dp[i][j] == dp[i - 1][j - 1] + 1) {",
      [
        12
      ]
    ],
    [
      "      res += str[i - 1];",
      [
        13
      ]
    ],
    [
      "      i -= 1;",
      [
        14
      ]
    ],
    [
      "      j -= 1;",
      [
        15
      ]
    ],
    [
      "    } else if (dp[i][j] == dp[i - 1][j]) i -= 1;",
      [
        16
      ]
    ],
    [
      "    else j -= 1;",
      [
        17
      ]
    ],
    [
      "  }",
      null
    ],
    [
      "  res = res.split(\"\").reverse().join(\"\");",
      [
        18
      ]
    ],
    [
      "  return res;",
      [
        19
      ]
    ],
    [
      "}",
      null
    ]
  ]
}