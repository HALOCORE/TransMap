{
  "src_anno_stmts": [
    [
      "def f_gold(k, s1, s2):",
      [
        1
      ]
    ],
    [
      "  n = len(s1)",
      [
        2
      ]
    ],
    [
      "  m = len(s2)",
      [
        3
      ]
    ],
    [
      "  lcs =[[0 for x in range(m + 1)] for y in range(n + 1)]",
      [
        4
      ]
    ],
    [
      "  cnt =[[0 for x in range(m + 1)] for y in range(n + 1)]",
      [
        5
      ]
    ],
    [
      "  for i in range(1, n + 1):",
      [
        6
      ]
    ],
    [
      "    for j in range(1, m + 1):",
      [
        7
      ]
    ],
    [
      "      lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])",
      [
        8
      ]
    ],
    [
      "      if(s1[i - 1] == s2[j - 1]): cnt[i][j] = cnt[i - 1][j - 1] + 1 ;",
      [
        9
      ]
    ],
    [
      "      if(cnt[i][j] >= k):",
      [
        10
      ]
    ],
    [
      "        for a in range(k, cnt[i][j] + 1): lcs[i][j] = max(lcs[i][j], lcs[i - a][j - a] + a)",
      [
        11
      ]
    ],
    [
      "  return lcs[n][m]",
      [
        12
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(k, s1, s2) {",
      [
        1
      ]
    ],
    [
      "  var n = s1.length;",
      [
        2
      ]
    ],
    [
      "  var m = s2.length;",
      [
        3
      ]
    ],
    [
      "  var lcs = Array(n+1).fill().map(_ => Array(m+1).fill(0));",
      [
        4
      ]
    ],
    [
      "  var cnt = [[0], [0]];",
      [
        5
      ]
    ],
    [
      "  for (var i = 1; i <= n; i++) {",
      [
        6
      ]
    ],
    [
      "    for (var j = 1; j <= m; j++) {",
      [
        7
      ]
    ],
    [
      "      lcs[i][j] = Math.max(lcs[i - 1][j], lcs[i][j - 1]);",
      [
        8
      ]
    ],
    [
      "      if (s1[i - 1] == s2[j - 1]) cnt[i][j] = cnt[i - 1][j - 1] + 1;",
      [
        9
      ]
    ],
    [
      "      if (cnt[i][j] >= k) {",
      [
        10
      ]
    ],
    [
      "        for (var a = k; a <= cnt[i][j]; a++) lcs[i][j] = Math.max(lcs[i][j], lcs[i - a][j - a] + a);",
      [
        11
      ]
    ],
    [
      "      }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "  }",
      null
    ],
    [
      "  return lcs[n][m];",
      [
        12
      ]
    ],
    [
      "}",
      null
    ]
  ]
}