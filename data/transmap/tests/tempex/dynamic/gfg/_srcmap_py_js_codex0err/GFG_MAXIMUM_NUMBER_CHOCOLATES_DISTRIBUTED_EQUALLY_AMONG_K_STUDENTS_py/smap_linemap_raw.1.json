{
  "src_anno_stmts": [
    [
      "def f_gold(arr, n, k):",
      [
        1
      ]
    ],
    [
      "  um, curr_rem, maxSum = { }, 0, 0",
      [
        2
      ]
    ],
    [
      "  sm =[0] * n",
      [
        3
      ]
    ],
    [
      "  sm[0] = arr[0]",
      [
        4
      ]
    ],
    [
      "  for i in range(1, n): sm[i] = sm[i - 1] + arr[i]",
      [
        5
      ]
    ],
    [
      "  for i in range(n):",
      [
        6
      ]
    ],
    [
      "    curr_rem = sm[i] % k",
      [
        7
      ]
    ],
    [
      "    if(not curr_rem and maxSum < sm[i]): maxSum = sm[i]",
      [
        8
      ]
    ],
    [
      "    elif(not curr_rem in um): um[curr_rem] = i",
      [
        9
      ]
    ],
    [
      "    elif(maxSum <(sm[i] - sm[um[curr_rem]])): maxSum = sm[i] - sm[um[curr_rem]]",
      [
        10
      ]
    ],
    [
      "  return maxSum // k",
      [
        11
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(arr, n, k) {",
      [
        1
      ]
    ],
    [
      "  var um = {}, curr_rem = 0, maxSum = 0;",
      [
        2
      ]
    ],
    [
      "  var sm = Array(n);",
      [
        3
      ]
    ],
    [
      "  sm[0] = arr[0];",
      [
        4
      ]
    ],
    [
      "  for (var i = 1; i < n; i++) sm[i] = sm[i - 1] + arr[i];",
      [
        5
      ]
    ],
    [
      "  for (var i = 0; i < n; i++) {",
      [
        6
      ]
    ],
    [
      "    curr_rem = (sm[i] % k + k) % k;",
      [
        7
      ]
    ],
    [
      "    if (!curr_rem && maxSum < sm[i]) maxSum = sm[i];",
      [
        8
      ]
    ],
    [
      "    else if (!(curr_rem in um)) um[curr_rem] = i;",
      [
        9
      ]
    ],
    [
      "    else if (maxSum < (sm[i] - sm[um[curr_rem]])) maxSum = sm[i] - sm[um[curr_rem]];",
      [
        10
      ]
    ],
    [
      "  }",
      null
    ],
    [
      "  return Math.floor(maxSum / k);",
      [
        11
      ]
    ],
    [
      "}",
      null
    ]
  ]
}