
### Python
### maximumsSplicedArray 
from typing import *   # --- py stmt 1
def f_gold(nums1: List[int], nums2: List[int]) -> int:   # --- py stmt 2
    def f(nums1, nums2):   # --- py stmt 3
        d = [a - b for a, b in zip(nums1, nums2)]   # --- py stmt 4
        t = mx = d[0]   # --- py stmt 5
        for v in d[1:]:   # --- py stmt 6
            if t > 0:   # --- py stmt 7
                t += v   # --- py stmt 8
            else:   # --- py stmt 9
                t = v   # --- py stmt 10
            mx = max(mx, t)   # --- py stmt 11
        return mx   # --- py stmt 12
    s1, s2 = sum(nums1), sum(nums2)   # --- py stmt 13
    return max(s2 + f(nums1, nums2), s1 + f(nums2, nums1))   # --- py stmt 14

### JavaScript
"use strict";

function f_gold(nums1, nums2) {   // --- py stmt 2
    function f(nums1, nums2) {   // --- py stmt 3
        var d = nums1.map((a, i) => a - nums2[i]);   // --- py stmt 4
        var t = mx = d[0];   // --- py stmt 5
        for (var v of d.slice(1)) {   // --- py stmt 6
            if (t > 0) {   // --- py stmt 7
                t += v;   // --- py stmt 8
            }
            else {   // --- py stmt 9
                t = v;   // --- py stmt 10
            }
            mx = Math.max(mx, t);   // --- py stmt 11
        }
        return mx;   // --- py stmt 12
    }
    var s1 = nums1.reduce(function(a, b) {   // --- py stmt 13
        return a + b;
    });
    var s2 = nums2.reduce(function(a, b) {   // --- py stmt 13
        return a + b;
    });
    return Math.max(s2 + f(nums1, nums2), s1 + f(nums2, nums1));   // --- py stmt 14
}



