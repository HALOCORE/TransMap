{
  "src_anno_stmts": [
    [
      "### rotateGrid",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(grid: List[List[int]], k: int) -> List[List[int]]:",
      [
        2
      ]
    ],
    [
      "    def rotate(grid, s1, e1, s2, e2, k):",
      [
        3
      ]
    ],
    [
      "        t = []",
      [
        4
      ]
    ],
    [
      "        for j in range(e2, e1, -1):",
      [
        5
      ]
    ],
    [
      "            t.append(grid[s1][j])",
      [
        6
      ]
    ],
    [
      "        for i in range(s1, s2):",
      [
        7
      ]
    ],
    [
      "            t.append(grid[i][e1])",
      [
        8
      ]
    ],
    [
      "        for j in range(e1, e2):",
      [
        9
      ]
    ],
    [
      "            t.append(grid[s2][j])",
      [
        10
      ]
    ],
    [
      "        for i in range(s2, s1, -1):",
      [
        11
      ]
    ],
    [
      "            t.append(grid[i][e2])",
      [
        12
      ]
    ],
    [
      "        k %= len(t)",
      [
        13
      ]
    ],
    [
      "        t = t[-k:] + t[:-k]",
      [
        14
      ]
    ],
    [
      "        k = 0",
      [
        15
      ]
    ],
    [
      "        for j in range(e2, e1, -1):",
      [
        16
      ]
    ],
    [
      "            grid[s1][j] = t[k]",
      [
        17
      ]
    ],
    [
      "            k += 1",
      [
        18
      ]
    ],
    [
      "        for i in range(s1, s2):",
      [
        19
      ]
    ],
    [
      "            grid[i][e1] = t[k]",
      [
        20
      ]
    ],
    [
      "            k += 1",
      [
        21
      ]
    ],
    [
      "        for j in range(e1, e2):",
      [
        22
      ]
    ],
    [
      "            grid[s2][j] = t[k]",
      [
        23
      ]
    ],
    [
      "            k += 1",
      [
        24
      ]
    ],
    [
      "        for i in range(s2, s1, -1):",
      [
        25
      ]
    ],
    [
      "            grid[i][e2] = t[k]",
      [
        26
      ]
    ],
    [
      "            k += 1",
      [
        27
      ]
    ],
    [
      "    m, n = len(grid), len(grid[0])",
      [
        28
      ]
    ],
    [
      "    s1 = e1 = 0",
      [
        29
      ]
    ],
    [
      "    s2, e2 = m - 1, n - 1",
      [
        30
      ]
    ],
    [
      "    while s1 <= s2 and e1 <= e2:",
      [
        31
      ]
    ],
    [
      "        rotate(grid, s1, e1, s2, e2, k)",
      [
        32
      ]
    ],
    [
      "        s1 += 1",
      [
        33
      ]
    ],
    [
      "        e1 += 1",
      [
        34
      ]
    ],
    [
      "        s2 -= 1",
      [
        35
      ]
    ],
    [
      "        e2 -= 1",
      [
        36
      ]
    ],
    [
      "    return grid",
      [
        37
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(grid, k) {",
      [
        2
      ]
    ],
    [
      "    function rotate(grid, s1, e1, s2, e2, k) {",
      [
        3
      ]
    ],
    [
      "        var t = [];",
      [
        4
      ]
    ],
    [
      "        for (var j = e2; j > e1; j--) {",
      [
        5
      ]
    ],
    [
      "            t.push(grid[s1][j]);",
      [
        6
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        for (var i = s1; i < s2; i++) {",
      [
        7
      ]
    ],
    [
      "            t.push(grid[i][e1]);",
      [
        8
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        for (var j = e1; j < e2; j++) {",
      [
        9
      ]
    ],
    [
      "            t.push(grid[s2][j]);",
      [
        10
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        for (var i = s2; i > s1; i--) {",
      [
        11
      ]
    ],
    [
      "            t.push(grid[i][e2]);",
      [
        12
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        k %= t.length;",
      [
        13
      ]
    ],
    [
      "        t = t.slice(-k).concat(t.slice(0, -k));",
      [
        14
      ]
    ],
    [
      "        k = 0;",
      [
        15
      ]
    ],
    [
      "        for (var j = e2; j > e1; j--) {",
      [
        16
      ]
    ],
    [
      "            grid[s1][j] = t[k];",
      [
        17
      ]
    ],
    [
      "            k++;",
      [
        18
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        for (var i = s1; i < s2; i++) {",
      [
        19
      ]
    ],
    [
      "            grid[i][e1] = t[k];",
      [
        20
      ]
    ],
    [
      "            k++;",
      [
        21
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        for (var j = e1; j < e2; j++) {",
      [
        22
      ]
    ],
    [
      "            grid[s2][j] = t[k];",
      [
        23
      ]
    ],
    [
      "            k++;",
      [
        24
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        for (var i = s2; i > s1; i--) {",
      [
        25
      ]
    ],
    [
      "            grid[i][e2] = t[k];",
      [
        26
      ]
    ],
    [
      "            k++;",
      [
        27
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    var m = grid.length;",
      [
        28
      ]
    ],
    [
      "    var n = grid[0].length;",
      [
        28
      ]
    ],
    [
      "    var s1 = e1 = 0;",
      [
        29
      ]
    ],
    [
      "    var s2 = m - 1;",
      [
        30
      ]
    ],
    [
      "    var e2 = n - 1;",
      [
        30
      ]
    ],
    [
      "    while (s1 <= s2 && e1 <= e2) {",
      [
        31
      ]
    ],
    [
      "        rotate(grid, s1, e1, s2, e2, k);",
      [
        32
      ]
    ],
    [
      "        s1++;",
      [
        33
      ]
    ],
    [
      "        e1++;",
      [
        34
      ]
    ],
    [
      "        s2--;",
      [
        35
      ]
    ],
    [
      "        e2--;",
      [
        36
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    return grid;",
      [
        37
      ]
    ],
    [
      "}",
      null
    ]
  ]
}