
### Python
### numEnclaves 
from typing import *   # --- py stmt 1
def f_gold(grid: List[List[int]]) -> int:   # --- py stmt 2
    def dfs(i, j):   # --- py stmt 3
        grid[i][j] = 0   # --- py stmt 4
        for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:   # --- py stmt 5
            x, y = i + a, j + b   # --- py stmt 6
            if 0 <= x < m and 0 <= y < n and grid[x][y] == 1:   # --- py stmt 7
                dfs(x, y)   # --- py stmt 8
    m, n = len(grid), len(grid[0])   # --- py stmt 9
    for i in range(m):   # --- py stmt 10
        for j in range(n):   # --- py stmt 11
            if grid[i][j] == 1 and (i == 0 or i == m - 1 or j == 0 or j == n - 1):   # --- py stmt 12
                dfs(i, j)   # --- py stmt 13
    return sum(grid[i][j] for i in range(m) for j in range(n))   # --- py stmt 14

### JavaScript
"use strict";
function f_gold(grid) {   // --- py stmt 2
    function dfs(i, j) {   // --- py stmt 3
        grid[i][j] = 0;   // --- py stmt 4
        for (let [a, b] of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {   // --- py stmt 5
            let [x, y] = [i + a, j + b];   // --- py stmt 6
            if (0 <= x < m && 0 <= y < n && grid[x][y] == 1) {   // --- py stmt 7
                dfs(x, y);   // --- py stmt 8
            }
        }
    }
    let [m, n] = [grid.length, grid[0].length];   // --- py stmt 9
    for (let i = 0; i < m; i++) {   // --- py stmt 10
        for (let j = 0; j < n; j++) {   // --- py stmt 11
            if (grid[i][j] == 1 && (i == 0 || i == m - 1 || j == 0 || j == n - 1)) {   // --- py stmt 12
                dfs(i, j);   // --- py stmt 13
            }
        }
    }
    return grid.reduce((a, b) => b.reduce((x, y) => x + y) + a, 0);   // --- py stmt 14
}



