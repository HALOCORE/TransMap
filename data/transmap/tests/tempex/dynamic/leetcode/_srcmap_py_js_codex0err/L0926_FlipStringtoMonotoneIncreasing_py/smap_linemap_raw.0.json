{
  "src_anno_stmts": [
    [
      "### minFlipsMonoIncr",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(s: str) -> int:",
      [
        2
      ]
    ],
    [
      "    n = len(s)",
      [
        3
      ]
    ],
    [
      "    left, right = [0] * (n + 1), [0] * (n + 1)",
      [
        4
      ]
    ],
    [
      "    ans = 0x3F3F3F3F",
      [
        5
      ]
    ],
    [
      "    for i in range(1, n + 1):",
      [
        6
      ]
    ],
    [
      "        left[i] = left[i - 1] + (1 if s[i - 1] == '1' else 0)",
      [
        7
      ]
    ],
    [
      "    for i in range(n - 1, -1, -1):",
      [
        8
      ]
    ],
    [
      "        right[i] = right[i + 1] + (1 if s[i] == '0' else 0)",
      [
        9
      ]
    ],
    [
      "    for i in range(0, n + 1):",
      [
        10
      ]
    ],
    [
      "        ans = min(ans, left[i] + right[i])",
      [
        11
      ]
    ],
    [
      "    return ans",
      [
        12
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(s) {",
      [
        2
      ]
    ],
    [
      "    let n = s.length;",
      [
        3
      ]
    ],
    [
      "    let left = new Array(n + 1);",
      [
        4
      ]
    ],
    [
      "    let right = new Array(n + 1).fill(0);",
      [
        4
      ]
    ],
    [
      "    let ans = 0x3F3F3F3F;",
      [
        5
      ]
    ],
    [
      "    for (let i = 1; i < n + 1; i++) {",
      [
        6
      ]
    ],
    [
      "        left[i] = left[i - 1] + (s[i - 1] == '1' ? 1 : 0);",
      [
        7
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    for (let i = n - 1; i > -1; i--) {",
      [
        8
      ]
    ],
    [
      "        right[i] = right[i + 1] + ((s[i] == '0') ? 1 : 0);",
      [
        9
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    for (let i = 0; i < n + 1; i++) {",
      [
        10
      ]
    ],
    [
      "        ans = Math.min(ans, left[i] + right[i]);",
      [
        11
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    return ans;",
      [
        12
      ]
    ],
    [
      "}",
      null
    ]
  ]
}