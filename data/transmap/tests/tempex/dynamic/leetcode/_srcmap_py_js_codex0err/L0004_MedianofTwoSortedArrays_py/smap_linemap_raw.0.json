{
  "src_anno_stmts": [
    [
      "### findMedianSortedArrays",
      null
    ],
    [
      "import math",
      [
        1
      ]
    ],
    [
      "from math import inf",
      [
        2
      ]
    ],
    [
      "from typing import *",
      [
        3
      ]
    ],
    [
      "def f_gold(nums1: List[int], nums2: List[int]) -> float:",
      [
        4
      ]
    ],
    [
      "    def findKth(i, j, k):",
      [
        5
      ]
    ],
    [
      "        if i >= m:",
      [
        6
      ]
    ],
    [
      "            return nums2[j + k - 1]",
      [
        7
      ]
    ],
    [
      "        if j >= n:",
      [
        8
      ]
    ],
    [
      "            return nums1[i + k - 1]",
      [
        9
      ]
    ],
    [
      "        if k == 1:",
      [
        10
      ]
    ],
    [
      "            return min(nums1[i], nums2[j])",
      [
        11
      ]
    ],
    [
      "        midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')",
      [
        12
      ]
    ],
    [
      "        midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')",
      [
        13
      ]
    ],
    [
      "        if midVal1 < midVal2:",
      [
        14
      ]
    ],
    [
      "            return findKth(i + k // 2, j, k - k // 2)",
      [
        15
      ]
    ],
    [
      "        return findKth(i, j + k // 2, k - k // 2)",
      [
        16
      ]
    ],
    [
      "    m, n = len(nums1), len(nums2)",
      [
        17
      ]
    ],
    [
      "    left, right = (m + n + 1) // 2, (m + n + 2) // 2",
      [
        18
      ]
    ],
    [
      "    return (findKth(0, 0, left) + findKth(0, 0, right)) / 2",
      [
        19
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "const findMedianSortedArrays = (nums1, nums2) => {",
      [
        4
      ]
    ],
    [
      "    const findKth = (i, j, k) => {",
      [
        5
      ]
    ],
    [
      "        if (i >= m) {",
      [
        6
      ]
    ],
    [
      "            return nums2[j + k - 1];",
      [
        7
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (j >= n) {",
      [
        8
      ]
    ],
    [
      "            return nums1[i + k - 1];",
      [
        9
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (k === 1) {",
      [
        10
      ]
    ],
    [
      "            return Math.min(nums1[i], nums2[j]);",
      [
        11
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        const midVal1 = nums1[i + Math.floor(k / 2) - 1] || Infinity;",
      [
        12
      ]
    ],
    [
      "        const midVal2 = nums2[j + Math.floor(k / 2) - 1] || Infinity;",
      [
        13
      ]
    ],
    [
      "        if (midVal1 < midVal2) {",
      [
        14
      ]
    ],
    [
      "            return findKth(i + Math.floor(k / 2), j, k - Math.floor(k / 2));",
      [
        15
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        return findKth(i, j + Math.floor(k / 2), k - Math.floor(k / 2));",
      [
        16
      ]
    ],
    [
      "    };",
      null
    ],
    [
      "    const m = nums1.length;",
      [
        17
      ]
    ],
    [
      "    const n = nums2.length;",
      [
        17
      ]
    ],
    [
      "    const left = Math.floor((m + n + 1) / 2);",
      [
        18
      ]
    ],
    [
      "    const right = Math.floor((m + n + 2) / 2);",
      [
        18
      ]
    ],
    [
      "    return (findKth(0, 0, left) + findKth(0, 0, right)) / 2;",
      [
        19
      ]
    ],
    [
      "};",
      null
    ]
  ]
}