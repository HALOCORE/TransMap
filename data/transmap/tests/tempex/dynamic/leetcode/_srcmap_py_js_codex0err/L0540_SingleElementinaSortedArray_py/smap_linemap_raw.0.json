{
  "src_anno_stmts": [
    [
      "### singleNonDuplicate",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(nums: List[int]) -> int:",
      [
        2
      ]
    ],
    [
      "    left, right = 0, len(nums) - 1",
      [
        3
      ]
    ],
    [
      "    while left < right:",
      [
        4
      ]
    ],
    [
      "        mid = (left + right) >> 1",
      [
        5
      ]
    ],
    [
      "        # Equals to: if (mid % 2 == 0 and nums[mid] != nums[mid + 1]) or (mid % 2 == 1 and nums[mid] != nums[mid - 1]):",
      null
    ],
    [
      "        if nums[mid] != nums[mid ^ 1]:",
      [
        6
      ]
    ],
    [
      "            right = mid",
      [
        7
      ]
    ],
    [
      "        else:",
      [
        8
      ]
    ],
    [
      "            left = mid + 1",
      [
        9
      ]
    ],
    [
      "    return nums[left]",
      [
        10
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "const singleNonDuplicate = (nums) => {",
      [
        2
      ]
    ],
    [
      "    let left = 0;",
      [
        3
      ]
    ],
    [
      "    let right = nums.length - 1;",
      [
        3
      ]
    ],
    [
      "    while (left < right) {",
      [
        4
      ]
    ],
    [
      "        let mid = (left + right) >> 1;",
      [
        5
      ]
    ],
    [
      "        if (nums[mid] != nums[mid ^ 1]) {",
      [
        6
      ]
    ],
    [
      "            right = mid;",
      [
        7
      ]
    ],
    [
      "        } else {",
      [
        8
      ]
    ],
    [
      "            left = mid + 1;",
      [
        9
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    return nums[left];",
      [
        10
      ]
    ],
    [
      "};",
      null
    ]
  ]
}