{
  "src_anno_stmts": [
    [
      "### swimInWater",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(grid: List[List[int]]) -> int:",
      [
        2
      ]
    ],
    [
      "    def find(x):",
      [
        3
      ]
    ],
    [
      "        if p[x] != x:",
      [
        4
      ]
    ],
    [
      "            p[x] = find(p[x])",
      [
        5
      ]
    ],
    [
      "        return p[x]",
      [
        6
      ]
    ],
    [
      "    n = len(grid)",
      [
        7
      ]
    ],
    [
      "    p = list(range(n * n))",
      [
        8
      ]
    ],
    [
      "    hi = [0] * (n * n)",
      [
        9
      ]
    ],
    [
      "    for i, row in enumerate(grid):",
      [
        10
      ]
    ],
    [
      "        for j, h in enumerate(row):",
      [
        11
      ]
    ],
    [
      "            hi[h] = i * n + j",
      [
        12
      ]
    ],
    [
      "    for t in range(n * n):",
      [
        13
      ]
    ],
    [
      "        i, j = hi[t] // n, hi[t] % n",
      [
        14
      ]
    ],
    [
      "        for a, b in [(0, -1), (0, 1), (1, 0), (-1, 0)]:",
      [
        15
      ]
    ],
    [
      "            x, y = i + a, j + b",
      [
        16
      ]
    ],
    [
      "            if 0 <= x < n and 0 <= y < n and grid[x][y] <= t:",
      [
        17
      ]
    ],
    [
      "                p[find(x * n + y)] = find(hi[t])",
      [
        18
      ]
    ],
    [
      "            if find(0) == find(n * n - 1):",
      [
        19
      ]
    ],
    [
      "                return t",
      [
        20
      ]
    ],
    [
      "    return -1",
      [
        21
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(grid) {",
      [
        2
      ]
    ],
    [
      "    function find(x) {",
      [
        3
      ]
    ],
    [
      "        if (p[x] != x) {",
      [
        4
      ]
    ],
    [
      "            p[x] = find(p[x]);",
      [
        5
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        return p[x];",
      [
        6
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    var n = grid.length;",
      [
        7
      ]
    ],
    [
      "    var p = Array.from(Array(n * n).keys());",
      [
        8
      ]
    ],
    [
      "    var hi = Array(n * n).fill(0);",
      [
        9
      ]
    ],
    [
      "    for (var i = 0; i < grid.length; i++) {",
      [
        10
      ]
    ],
    [
      "        for (var j = 0; j < grid[i].length; j++) {",
      [
        11
      ]
    ],
    [
      "            hi[grid[i][j]] = i * n + j;",
      [
        12
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    for (var t = 0; t < n * n; t++) {",
      [
        13
      ]
    ],
    [
      "        var i = Math.floor(hi[t] / n);",
      [
        14
      ]
    ],
    [
      "        var j = hi[t] % n;",
      [
        14
      ]
    ],
    [
      "        for (var a = 0; a < 2; a++) {",
      [
        15
      ]
    ],
    [
      "            for (var b = -1; b < 2; b++) {",
      [
        15
      ]
    ],
    [
      "                if (a == 0 && b == 0) {",
      [
        15
      ]
    ],
    [
      "                    continue;",
      [
        15
      ]
    ],
    [
      "                }",
      null
    ],
    [
      "                var x = i + a;",
      [
        16
      ]
    ],
    [
      "                var y = j + b;",
      [
        16
      ]
    ],
    [
      "                if (0 <= x && x < n && 0 <= y && y < n && grid[x][y] <= t) {",
      [
        17
      ]
    ],
    [
      "                    p[find(x * n + y)] = find(hi[t]);",
      [
        18
      ]
    ],
    [
      "                }",
      null
    ],
    [
      "                if (find(0) == find(n * n - 1)) {",
      [
        19
      ]
    ],
    [
      "                    return t;",
      [
        20
      ]
    ],
    [
      "                }",
      null
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    return -1;",
      [
        21
      ]
    ],
    [
      "}",
      null
    ]
  ]
}