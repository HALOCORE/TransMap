{
  "src_anno_stmts": [
    [
      "### minimumMoves",
      null
    ],
    [
      "from collections import deque",
      [
        1
      ]
    ],
    [
      "from typing import *",
      [
        2
      ]
    ],
    [
      "def f_gold(grid: List[List[int]]) -> int:",
      [
        3
      ]
    ],
    [
      "    def check(a, b):",
      [
        4
      ]
    ],
    [
      "        if (a, b) not in vis:",
      [
        5
      ]
    ],
    [
      "            vis.add((a, b))",
      [
        6
      ]
    ],
    [
      "            q.append((a, b))",
      [
        7
      ]
    ],
    [
      "    n = len(grid)",
      [
        8
      ]
    ],
    [
      "    target = (n * n - 2, n * n - 1)",
      [
        9
      ]
    ],
    [
      "    q = deque([(0, 1)])",
      [
        10
      ]
    ],
    [
      "    vis = {(0, 1)}",
      [
        11
      ]
    ],
    [
      "    ans = 0",
      [
        12
      ]
    ],
    [
      "    while q:",
      [
        13
      ]
    ],
    [
      "        for _ in range(len(q)):",
      [
        14
      ]
    ],
    [
      "            a, b = q.popleft()",
      [
        15
      ]
    ],
    [
      "            if (a, b) == target:",
      [
        16
      ]
    ],
    [
      "                return ans",
      [
        17
      ]
    ],
    [
      "            i1, j1 = a // n, a % n",
      [
        18
      ]
    ],
    [
      "            i2, j2 = b // n, b % n",
      [
        19
      ]
    ],
    [
      "            if (",
      [
        20
      ]
    ],
    [
      "                j1 + 1 < n",
      null
    ],
    [
      "                and j2 + 1 < n",
      null
    ],
    [
      "                and grid[i1][j1 + 1] == 0",
      null
    ],
    [
      "                and grid[i2][j2 + 1] == 0",
      null
    ],
    [
      "            ):",
      null
    ],
    [
      "                check(i1 * n + j1 + 1, i2 * n + j2 + 1)",
      null
    ],
    [
      "                if j1 == j2:",
      null
    ],
    [
      "                    check(a, i1 * n + j2 + 1)",
      null
    ],
    [
      "            if (",
      [
        21
      ]
    ],
    [
      "                i1 + 1 < n",
      null
    ],
    [
      "                and i2 + 1 < n",
      null
    ],
    [
      "                and grid[i1 + 1][j1] == 0",
      null
    ],
    [
      "                and grid[i2 + 1][j2] == 0",
      null
    ],
    [
      "            ):",
      null
    ],
    [
      "                check((i1 + 1) * n + j1, (i2 + 1) * n + j2)",
      null
    ],
    [
      "                if i1 == i2:",
      null
    ],
    [
      "                    check(a, (i2 + 1) * n + j1)",
      null
    ],
    [
      "        ans += 1",
      [
        22
      ]
    ],
    [
      "    return -1",
      [
        23
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(grid) {",
      [
        3
      ]
    ],
    [
      "    function check(a, b) {",
      [
        4
      ]
    ],
    [
      "        if (!vis.has(a + \",\" + b)) {",
      [
        5
      ]
    ],
    [
      "            vis.add(a + \",\" + b);",
      [
        6
      ]
    ],
    [
      "            q.push([a, b]);",
      [
        7
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    var n = grid.length;",
      [
        8
      ]
    ],
    [
      "    var target = [n * n - 2, n * n - 1];",
      [
        9
      ]
    ],
    [
      "    var q = [[0, 1]];",
      [
        10
      ]
    ],
    [
      "    var vis = new Set([0 + \",\" + 1]);",
      [
        11
      ]
    ],
    [
      "    var ans = 0;",
      [
        12
      ]
    ],
    [
      "    while (q.length > 0) {",
      [
        13
      ]
    ],
    [
      "        for (var _ = 0; _ < q.length; _++) {",
      [
        14
      ]
    ],
    [
      "            var [a, b] = q.shift();",
      [
        15
      ]
    ],
    [
      "            if (a == target[0] && b == target[1]) return ans;",
      [
        16,
        17
      ]
    ],
    [
      "            var i1 = Math.floor(a / n);",
      [
        18
      ]
    ],
    [
      "            var j1 = a % n;",
      [
        18
      ]
    ],
    [
      "            var i2 = Math.floor(b / n);",
      [
        19
      ]
    ],
    [
      "            var j2 = b % n;",
      [
        19
      ]
    ],
    [
      "            if (j1 + 1 < n && j2 + 1 < n && grid[i1][j1 + 1] == 0 && grid[i2][j2 + 1] == 0) {",
      [
        20
      ]
    ],
    [
      "                check(i1 * n + j1 + 1, i2 * n + j2 + 1);",
      [
        20
      ]
    ],
    [
      "                if (j1 == j2) check(a, i1 * n + j2 + 1);",
      [
        20
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "            if (i1 + 1 < n && i2 + 1 < n && grid[i1 + 1][j1] == 0 && grid[i2 + 1][j2] == 0) {",
      [
        21
      ]
    ],
    [
      "                check((i1 + 1) * n + j1, (i2 + 1) * n + j2);",
      [
        21
      ]
    ],
    [
      "                if (i1 == i2) check(a, (i2 + 1) * n + j1);",
      [
        21
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "        ans++;",
      [
        22
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    return -1;",
      [
        23
      ]
    ],
    [
      "}",
      null
    ]
  ]
}