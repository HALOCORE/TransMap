{
  "src_anno_stmts": [
    [
      "### maxSumMinProduct",
      null
    ],
    [
      "from itertools import accumulate",
      [
        1
      ]
    ],
    [
      "from typing import *",
      [
        2
      ]
    ],
    [
      "def f_gold(nums: List[int]) -> int:",
      [
        3
      ]
    ],
    [
      "    mod = int(1e9) + 7",
      [
        4
      ]
    ],
    [
      "    n = len(nums)",
      [
        5
      ]
    ],
    [
      "    left = [-1] * n",
      [
        6
      ]
    ],
    [
      "    right = [n] * n",
      [
        7
      ]
    ],
    [
      "    stk = []",
      [
        8
      ]
    ],
    [
      "    for i, v in enumerate(nums):",
      [
        9
      ]
    ],
    [
      "        while stk and nums[stk[-1]] >= v:",
      [
        10
      ]
    ],
    [
      "            stk.pop()",
      [
        11
      ]
    ],
    [
      "        if stk:",
      [
        12
      ]
    ],
    [
      "            left[i] = stk[-1]",
      [
        13
      ]
    ],
    [
      "        stk.append(i)",
      [
        14
      ]
    ],
    [
      "    stk = []",
      [
        15
      ]
    ],
    [
      "    for i in range(n - 1, -1, -1):",
      [
        16
      ]
    ],
    [
      "        while stk and nums[stk[-1]] > nums[i]:",
      [
        17
      ]
    ],
    [
      "            stk.pop()",
      [
        18
      ]
    ],
    [
      "        if stk:",
      [
        19
      ]
    ],
    [
      "            right[i] = stk[-1]",
      [
        20
      ]
    ],
    [
      "        stk.append(i)",
      [
        21
      ]
    ],
    [
      "    s = [0] + list(accumulate(nums))",
      [
        22
      ]
    ],
    [
      "    ans = max(v * (s[right[i]] - s[left[i] + 1]) for i, v in enumerate(nums))",
      [
        23
      ]
    ],
    [
      "    return ans % mod",
      [
        24
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(nums) {",
      [
        3
      ]
    ],
    [
      "    var mod = Math.pow(10, 9) + 7;",
      [
        4
      ]
    ],
    [
      "    var n = nums.length;",
      [
        5
      ]
    ],
    [
      "    var left = Array(n).fill(-1);",
      [
        6
      ]
    ],
    [
      "    var right = Array(n).fill(n);",
      [
        7
      ]
    ],
    [
      "    var stk = [];",
      [
        8
      ]
    ],
    [
      "    for (var i = 0; i < n; i++) {",
      [
        9
      ]
    ],
    [
      "        while (stk.length > 0 && nums[stk[stk.length - 1]] >= nums[i]) {",
      [
        10
      ]
    ],
    [
      "            stk.pop();",
      [
        11
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (stk.length > 0) {",
      [
        12
      ]
    ],
    [
      "            left[i] = stk[stk.length - 1];",
      [
        13
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        stk.push(i);",
      [
        14
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    stk = [];",
      [
        15
      ]
    ],
    [
      "    for (var i = n - 1; i >= 0; i--) {",
      [
        16
      ]
    ],
    [
      "        while (stk.length > 0 && nums[stk[stk.length - 1]] > nums[i]) {",
      [
        17
      ]
    ],
    [
      "            stk.pop();",
      [
        18
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (stk.length > 0) {",
      [
        19
      ]
    ],
    [
      "            right[i] = stk[stk.length - 1];",
      [
        20
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        stk.push(i);",
      [
        21
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    var s = [0].concat(nums.reduce(function (a, b) { return a + b; }));",
      [
        22
      ]
    ],
    [
      "    var ans = Math.max.apply(Math, nums.map(function (v, i) { return v * (s[right[i]] - s[left[i] + 1]); }));",
      [
        23
      ]
    ],
    [
      "    return ans % mod;",
      [
        24
      ]
    ],
    [
      "}",
      null
    ]
  ]
}