{
  "src_anno_stmts": [
    [
      "### minCut",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(s: str) -> int:",
      [
        2
      ]
    ],
    [
      "    n = len(s)",
      [
        3
      ]
    ],
    [
      "    dp1 = [[False] * n for _ in range(n)]",
      [
        4
      ]
    ],
    [
      "    for i in range(n - 1, -1, -1):",
      [
        5
      ]
    ],
    [
      "        for j in range(i, n):",
      [
        6
      ]
    ],
    [
      "            dp1[i][j] = s[i] == s[j] and (j - 1 < 3 or dp1[i + 1][j - 1])",
      [
        7
      ]
    ],
    [
      "    dp2 = [0] * n",
      [
        8
      ]
    ],
    [
      "    for i in range(n):",
      [
        9
      ]
    ],
    [
      "        if not dp1[0][i]:",
      [
        10
      ]
    ],
    [
      "            dp2[i] = i",
      [
        11
      ]
    ],
    [
      "            for j in range(1, i + 1):",
      [
        12
      ]
    ],
    [
      "                if dp1[j][i]:",
      [
        13
      ]
    ],
    [
      "                    dp2[i] = min(dp2[i], dp2[j - 1] + 1)",
      [
        14
      ]
    ],
    [
      "    return dp2[-1]",
      [
        15
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(s) {",
      [
        2
      ]
    ],
    [
      "    let n = s.length;",
      [
        3
      ]
    ],
    [
      "    let dp1 = new Array(n);",
      [
        4
      ]
    ],
    [
      "    for (let i = 0; i < n; i++) {",
      [
        4
      ]
    ],
    [
      "        dp1[i] = new Array(n);",
      [
        4
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    for (let i = n - 1; i >= 0; i--) {",
      [
        5
      ]
    ],
    [
      "        for (let j = i; j < n; j++) {",
      [
        6
      ]
    ],
    [
      "            dp1[i][j] = s[i] == s[j] && (j - 1 < 3 || dp1[i + 1][j - 1]);",
      [
        7
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    let dp2 = new Array(n).fill(0);",
      [
        8
      ]
    ],
    [
      "    for (let i = 0; i < n; i++) {",
      [
        9
      ]
    ],
    [
      "        if (!dp1[0][i]) {",
      [
        10
      ]
    ],
    [
      "            dp2[i] = i;",
      [
        11
      ]
    ],
    [
      "            for (let j = 1; j <= i; j++) {",
      [
        12
      ]
    ],
    [
      "                if (dp1[j][i]) {",
      [
        13
      ]
    ],
    [
      "                    dp2[i] = Math.min(dp2[i], dp2[j - 1] + 1);",
      [
        14
      ]
    ],
    [
      "                }",
      null
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    return dp2[n - 1];",
      [
        15
      ]
    ],
    [
      "}",
      null
    ]
  ]
}