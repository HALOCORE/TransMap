{
  "src_anno_stmts": [
    [
      "### minSwaps",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(s: str) -> int:",
      [
        2
      ]
    ],
    [
      "    s0n0 = s0n1 = s1n0 = s1n1 = 0",
      [
        3
      ]
    ],
    [
      "    for i in range(len(s)):",
      [
        4
      ]
    ],
    [
      "        if (i & 1) == 0:",
      [
        5
      ]
    ],
    [
      "            if s[i] != '0':",
      [
        6
      ]
    ],
    [
      "                s0n0 += 1",
      [
        7
      ]
    ],
    [
      "            else:",
      [
        8
      ]
    ],
    [
      "                s1n1 += 1",
      [
        9
      ]
    ],
    [
      "        else:",
      [
        10
      ]
    ],
    [
      "            if s[i] != '0':",
      [
        11
      ]
    ],
    [
      "                s1n0 += 1",
      [
        12
      ]
    ],
    [
      "            else:",
      [
        13
      ]
    ],
    [
      "                s0n1 += 1",
      [
        14
      ]
    ],
    [
      "    if s0n0 != s0n1 and s1n0 != s1n1:",
      [
        15
      ]
    ],
    [
      "        return -1",
      [
        16
      ]
    ],
    [
      "    if s0n0 != s0n1:",
      [
        17
      ]
    ],
    [
      "        return s1n0",
      [
        18
      ]
    ],
    [
      "    if s1n0 != s1n1:",
      [
        19
      ]
    ],
    [
      "        return s0n0",
      [
        20
      ]
    ],
    [
      "    return min(s0n0, s1n0)",
      [
        21
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(s) {",
      [
        2
      ]
    ],
    [
      "    var s0n0 = s0n1 = s1n0 = s1n1 = 0;",
      [
        3
      ]
    ],
    [
      "    for (var i = 0; i < s.length; i++) {",
      [
        4
      ]
    ],
    [
      "        if ((i & 1) == 0) {",
      [
        5
      ]
    ],
    [
      "            if (s[i] != '0') {",
      [
        6
      ]
    ],
    [
      "                s0n0 += 1;",
      [
        7
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "            else {",
      [
        8
      ]
    ],
    [
      "                s1n1 += 1;",
      [
        9
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "        else {",
      [
        10
      ]
    ],
    [
      "            if (s[i] != '0') {",
      [
        11
      ]
    ],
    [
      "                s1n0 += 1;",
      [
        12
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "            else {",
      [
        13
      ]
    ],
    [
      "                s0n1 += 1;",
      [
        14
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    if (s0n0 != s0n1 && s1n0 != s1n1) {",
      [
        15
      ]
    ],
    [
      "        return -1;",
      [
        16
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    if (s0n0 != s0n1) {",
      [
        17
      ]
    ],
    [
      "        return s1n0;",
      [
        18
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    if (s1n0 != s1n1) {",
      [
        19
      ]
    ],
    [
      "        return s0n0;",
      [
        20
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    return Math.min(s0n0, s1n0);",
      [
        21
      ]
    ],
    [
      "}",
      null
    ]
  ]
}