{
  "src_anno_stmts": [
    [
      "### minKnightMoves",
      null
    ],
    [
      "from collections import deque",
      [
        1
      ]
    ],
    [
      "from typing import *",
      [
        2
      ]
    ],
    [
      "def f_gold(x: int, y: int) -> int:",
      [
        3
      ]
    ],
    [
      "    q = deque([(0, 0)])",
      [
        4
      ]
    ],
    [
      "    ans = 0",
      [
        5
      ]
    ],
    [
      "    vis = {(0, 0)}",
      [
        6
      ]
    ],
    [
      "    dirs = ((-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1))",
      [
        7
      ]
    ],
    [
      "    while q:",
      [
        8
      ]
    ],
    [
      "        for _ in range(len(q)):",
      [
        9
      ]
    ],
    [
      "            i, j = q.popleft()",
      [
        10
      ]
    ],
    [
      "            if (i, j) == (x, y):",
      [
        11
      ]
    ],
    [
      "                return ans",
      [
        12
      ]
    ],
    [
      "            for a, b in dirs:",
      [
        13
      ]
    ],
    [
      "                c, d = i + a, j + b",
      [
        14
      ]
    ],
    [
      "                if (c, d) not in vis:",
      [
        15
      ]
    ],
    [
      "                    vis.add((c, d))",
      [
        16
      ]
    ],
    [
      "                    q.append((c, d))",
      [
        17
      ]
    ],
    [
      "        ans += 1",
      [
        18
      ]
    ],
    [
      "    return -1",
      [
        19
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(x, y) {",
      [
        3
      ]
    ],
    [
      "    var q = new Array();",
      [
        4
      ]
    ],
    [
      "    q.push([0, 0]);",
      [
        4
      ]
    ],
    [
      "    var ans = 0;",
      [
        5
      ]
    ],
    [
      "    var vis = new Set();",
      [
        6
      ]
    ],
    [
      "    vis.add([0, 0].join(\",\"));",
      [
        6
      ]
    ],
    [
      "    var dirs = [[-2, 1], [-1, 2], [1, 2], [2, 1], [2, -1], [1, -2], [-1, -2], [-2, -1]];",
      [
        7
      ]
    ],
    [
      "    while (q.length > 0) {",
      [
        8
      ]
    ],
    [
      "        for (var _ = 0, length = q.length; _ < length; _++) {",
      [
        9
      ]
    ],
    [
      "            var i = q[0][0];",
      [
        10
      ]
    ],
    [
      "            var j = q[0][1];",
      [
        10
      ]
    ],
    [
      "            q.shift();",
      [
        10
      ]
    ],
    [
      "            if (i == x && j == y) {",
      [
        11
      ]
    ],
    [
      "                return ans;",
      [
        12
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "            for (var [a, b] of dirs) {",
      [
        13
      ]
    ],
    [
      "                var c = i + a;",
      [
        14
      ]
    ],
    [
      "                var d = j + dirs[a][1];",
      [
        14
      ]
    ],
    [
      "                if (!vis.has([c, d].join(\",\"))) {",
      [
        15
      ]
    ],
    [
      "                    vis.add([c, d].join(\",\"));",
      [
        16
      ]
    ],
    [
      "                    q.push([c, d]);",
      [
        17
      ]
    ],
    [
      "                }",
      null
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "        ans += 1;",
      [
        18
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    return -1;",
      [
        19
      ]
    ],
    [
      "}",
      null
    ]
  ]
}