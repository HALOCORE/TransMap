{
  "src_anno_stmts": [
    [
      "### secondHighest",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(s: str) -> int:",
      [
        2
      ]
    ],
    [
      "    largest_digit = second_largest_digit = -1",
      [
        3
      ]
    ],
    [
      "    for c in s:",
      [
        4
      ]
    ],
    [
      "        if c.isdigit():",
      [
        5
      ]
    ],
    [
      "            num = int(c)",
      [
        6
      ]
    ],
    [
      "            if num > largest_digit:",
      [
        7
      ]
    ],
    [
      "                second_largest_digit, largest_digit = largest_digit, num",
      [
        8
      ]
    ],
    [
      "            elif num > second_largest_digit and num < largest_digit:",
      [
        9
      ]
    ],
    [
      "                second_largest_digit = num",
      [
        10
      ]
    ],
    [
      "    return second_largest_digit",
      [
        11
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(s) {",
      [
        2
      ]
    ],
    [
      "    var largest_digit = -1, second_largest_digit = -1;",
      [
        3
      ]
    ],
    [
      "    for (var c of s) {",
      [
        4
      ]
    ],
    [
      "        if (c.isdigit()) {",
      [
        5
      ]
    ],
    [
      "            var num = parseInt(c);",
      [
        6
      ]
    ],
    [
      "            if (num > largest_digit) {",
      [
        7
      ]
    ],
    [
      "                second_largest_digit = largest_digit;",
      [
        8
      ]
    ],
    [
      "                largest_digit = num;",
      [
        8
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "            else if (num > second_largest_digit && num < largest_digit) {",
      [
        9
      ]
    ],
    [
      "                second_largest_digit = num;",
      [
        10
      ]
    ],
    [
      "            }",
      null
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    return second_largest_digit;",
      [
        11
      ]
    ],
    [
      "}",
      null
    ]
  ]
}