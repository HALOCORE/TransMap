{
  "src_anno_stmts": [
    [
      "### shortestDistance",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(wordsDict: List[str], word1: str, word2: str) -> int:",
      [
        2
      ]
    ],
    [
      "    i1 = i2 = -1",
      [
        3
      ]
    ],
    [
      "    shortest_distance = len(wordsDict)",
      [
        4
      ]
    ],
    [
      "    for i in range(len(wordsDict)):",
      [
        5
      ]
    ],
    [
      "        if wordsDict[i] == word1:",
      [
        6
      ]
    ],
    [
      "            i1 = i",
      [
        7
      ]
    ],
    [
      "        elif wordsDict[i] == word2:",
      [
        8
      ]
    ],
    [
      "            i2 = i",
      [
        9
      ]
    ],
    [
      "        if i1 != -1 and i2 != -1:",
      [
        10
      ]
    ],
    [
      "            shortest_distance = min(shortest_distance, abs(i1 - i2))",
      [
        11
      ]
    ],
    [
      "    return shortest_distance",
      [
        12
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(wordsDict, word1, word2) {",
      [
        2
      ]
    ],
    [
      "    var i1 = i2 = -1;",
      [
        3
      ]
    ],
    [
      "    var shortest_distance = wordsDict.length;",
      [
        4
      ]
    ],
    [
      "    for (var i = 0; i < wordsDict.length; i++) {",
      [
        5
      ]
    ],
    [
      "        if (wordsDict[i] == word1) {",
      [
        6
      ]
    ],
    [
      "            i1 = i;",
      [
        7
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        else if (wordsDict[i] == word2) {",
      [
        8
      ]
    ],
    [
      "            i2 = i;",
      [
        9
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (i1 != -1 && i2 != -1) {",
      [
        10
      ]
    ],
    [
      "            shortest_distance = Math.min(shortest_distance, Math.abs(i1 - i2));",
      [
        11
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "    }",
      null
    ],
    [
      "    return shortest_distance;",
      [
        12
      ]
    ],
    [
      "}",
      null
    ]
  ]
}