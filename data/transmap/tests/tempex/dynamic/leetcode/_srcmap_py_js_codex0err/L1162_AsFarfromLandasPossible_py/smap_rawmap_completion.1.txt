
### Python
### maxDistance 
from collections import deque   # --- py stmt 1
from typing import *   # --- py stmt 2
def f_gold(grid: List[List[int]]) -> int:   # --- py stmt 3
    n = len(grid)   # --- py stmt 4
    q = deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 1])   # --- py stmt 5
    ans = -1   # --- py stmt 6
    valid = False   # --- py stmt 7
    while q:   # --- py stmt 8
        ans += 1   # --- py stmt 9
        for _ in range(len(q)):   # --- py stmt 10
            i, j = q.popleft()   # --- py stmt 11
            for a, b in [[0, 1], [0, -1], [1, 0], [-1, 0]]:   # --- py stmt 12
                x, y = i + a, b + j   # --- py stmt 13
                if 0 <= x < n and 0 <= y < n and grid[x][y] == 0:   # --- py stmt 14
                    valid = True   # --- py stmt 15
                    grid[x][y] = 1   # --- py stmt 16
                    q.append((x, y))   # --- py stmt 17
    return ans if valid else -1   # --- py stmt 18

### JavaScript
"use strict";

function f_gold (grid) {   // --- py stmt 3
    var n = grid.length;   // --- py stmt 4
    var q = [];   // --- py stmt 5
    for (var i = 0; i < n; i++) {   // --- py stmt 5
        for (var j = 0; j < n; j++) {   // --- py stmt 5
            if (grid[i][j] == 1) {   // --- py stmt 5
                q.push([i, j]);   // --- py stmt 5
            }
        }
    }
    var ans = -1;   // --- py stmt 6
    var valid = false;   // --- py stmt 7
    while (q.length > 0) {   // --- py stmt 8
        ans += 1;   // --- py stmt 9
        for (var _ = 0, length = q.length; _ < length; _++) {   // --- py stmt 10
            var i = q[0][0];   // --- py stmt 11
            var j = q[0][1];   // --- py stmt 11
            q.shift();   // --- py stmt 11
            for (var a = 0; a < 2; a++) {   // --- py stmt 12
                for (var b = 0; b < 2; b++) {   // --- py stmt 12
                    var x = i + a;   // --- py stmt 13
                    var y = b + j;   // --- py stmt 13
                    if (0 <= x && x < n && 0 <= y && y < n && grid[x][y] == 0) {   // --- py stmt 14
                        valid = true;   // --- py stmt 15
                        grid[x][y] = 1;   // --- py stmt 16
                        q.push([x, y]);   // --- py stmt 17
                    }
                }
            }
        }
    }
    return valid ? ans : -1;   // --- py stmt 18
}



