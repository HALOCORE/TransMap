
### Python
### shortestSubarray 
from itertools import accumulate   # --- py stmt 1
import math   # --- py stmt 2
from math import inf   # --- py stmt 3
from collections import deque   # --- py stmt 4
from typing import *   # --- py stmt 5
def f_gold(nums: List[int], k: int) -> int:   # --- py stmt 6
    s = [0] + list(accumulate(nums))   # --- py stmt 7
    ans = float('inf')   # --- py stmt 8
    q = deque([0])   # --- py stmt 9
    for i in range(1, len(s)):   # --- py stmt 10
        while q and s[i] - s[q[0]] >= k:   # --- py stmt 11
            ans = min(ans, i - q.popleft())   # --- py stmt 12
        while q and s[i] <= s[q[-1]]:   # --- py stmt 13
            q.pop()   # --- py stmt 14
        q.append(i)   # --- py stmt 15
    return -1 if ans == float('inf') else ans   # --- py stmt 16

### JavaScript
"use strict";

function f_gold(nums, k) {   // --- py stmt 6
    var s = [0].concat(nums.map((sum => value => sum += value)(0)));   // --- py stmt 7
    var ans = float('inf');   // --- py stmt 8
    var q = [0];   // --- py stmt 9
    for (var i = 1; i < s.length; i++) {   // --- py stmt 10
        while (q.length && s[i] - s[q[0]] >= k) {   // --- py stmt 11
            ans = Math.min(ans, i - q.shift());   // --- py stmt 12
        }
        while (q.length && s[i] <= s[q[q.length - 1]]) {   // --- py stmt 13
            q.pop();   // --- py stmt 14
        }
        q.push(i);   // --- py stmt 15
    }
    return (ans == Number.POSITIVE_INFINITY) ? -1 : ans;   // --- py stmt 16
}



