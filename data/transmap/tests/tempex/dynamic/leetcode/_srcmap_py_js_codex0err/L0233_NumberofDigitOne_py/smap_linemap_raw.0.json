{
  "src_anno_stmts": [
    [
      "### countDigitOne",
      null
    ],
    [
      "from typing import *",
      [
        1
      ]
    ],
    [
      "def f_gold(n: int) -> int:",
      [
        2
      ]
    ],
    [
      "    dp = [[-1] * 10 for _ in range(10)]",
      [
        3
      ]
    ],
    [
      "    digit = []",
      [
        4
      ]
    ],
    [
      "    while n:",
      [
        5
      ]
    ],
    [
      "        digit.append(n % 10)",
      [
        6
      ]
    ],
    [
      "        n //= 10",
      [
        7
      ]
    ],
    [
      "    def dfs(pos: int, cnt: int, limit: bool) -> int:",
      [
        8
      ]
    ],
    [
      "        if pos == -1:",
      [
        9
      ]
    ],
    [
      "            return cnt",
      [
        10
      ]
    ],
    [
      "        if not limit and dp[pos][cnt] != -1:",
      [
        11
      ]
    ],
    [
      "            return dp[pos][cnt]",
      [
        12
      ]
    ],
    [
      "        up = digit[pos] if limit else 9",
      [
        13
      ]
    ],
    [
      "        ans = 0",
      [
        14
      ]
    ],
    [
      "        for i in range(up + 1):",
      [
        15
      ]
    ],
    [
      "            nxt = cnt + 1 if i == 1 else cnt",
      [
        16
      ]
    ],
    [
      "            ans += dfs(pos - 1, nxt, limit and i == digit[pos])",
      [
        17
      ]
    ],
    [
      "        if not limit:",
      [
        18
      ]
    ],
    [
      "            dp[pos][cnt] = ans",
      [
        19
      ]
    ],
    [
      "        return ans",
      [
        20
      ]
    ],
    [
      "    return dfs(len(digit) - 1, 0, True)",
      [
        21
      ]
    ]
  ],
  "tar_anno_stmts": [
    [
      "function f_gold(n) {",
      [
        2
      ]
    ],
    [
      "    var dp = [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]];",
      [
        3
      ]
    ],
    [
      "    var digit = [];",
      [
        4
      ]
    ],
    [
      "    while (n) {",
      [
        5
      ]
    ],
    [
      "        digit.push(n % 10);",
      [
        6
      ]
    ],
    [
      "        n = Math.floor(n / 10);",
      [
        7
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    function dfs(pos, cnt, limit) {",
      [
        8
      ]
    ],
    [
      "        if (pos == -1) {",
      [
        9
      ]
    ],
    [
      "            return cnt;",
      [
        10
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (!limit && dp[pos][cnt] != -1) {",
      [
        11
      ]
    ],
    [
      "            return dp[pos][cnt];",
      [
        12
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        var up = limit ? digit[pos] : 9;",
      [
        13
      ]
    ],
    [
      "        var ans = 0;",
      [
        14
      ]
    ],
    [
      "        for (var i = 0; i < up + 1; i++) {",
      [
        15
      ]
    ],
    [
      "            var nxt = i == 1 ? cnt + 1 : cnt;",
      [
        16
      ]
    ],
    [
      "            ans += dfs(pos - 1, nxt, limit && i == digit[pos]);",
      [
        17
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        if (!limit) {",
      [
        18
      ]
    ],
    [
      "            dp[pos][cnt] = ans;",
      [
        19
      ]
    ],
    [
      "        }",
      null
    ],
    [
      "        return ans;",
      [
        20
      ]
    ],
    [
      "    }",
      null
    ],
    [
      "    return dfs(digit.length - 1, 0, true);",
      [
        21
      ]
    ],
    [
      "}",
      null
    ]
  ]
}