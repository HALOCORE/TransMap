{"func_id": "chatgptcomp", "params": {"messages": [{"role": "system", "content": "\nYou are a helpful assistant that translates Python code into JavaScript code.\nFor user requests, you output the code directly without explanations, and always in the same format.\nYou should ALWAYS output best-effort translation, even if you are provided partial code, modules, or code with dependencies.\nFor omitted part of the code in the source '...', you should also use '...' to denote the omitted part in the translation.\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nprint(\"Hello World\")\n```\n"}, {"role": "assistant", "content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nconsole.log(\"Hello World\");\n```\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\n    # TRANSLATION NOTE: the following function(s) is inside a class `HTMLParser`\n    # Internal -- handle starttag, return end or -1 if not terminated\n    def parse_starttag(self, i):\n        self.__starttag_text = None\n        endpos = self.check_for_whole_start_tag(i)\n        if endpos < 0:\n            return endpos\n        rawdata = self.rawdata\n        self.__starttag_text = rawdata[i:endpos]\n\n        # Now parse the data between i+1 and j into a tag and attrs\n        attrs = []\n        match = tagfind_tolerant.match(rawdata, i+1)\n        assert match, 'unexpected call to parse_starttag()'\n        k = match.end()\n        self.lasttag = tag = match.group(1).lower()\n        while k < endpos:\n            m = attrfind_tolerant.match(rawdata, k)\n            if not m:\n                break\n            attrname, rest, attrvalue = m.group(1, 2, 3)\n            if not rest:\n                attrvalue = None\n            elif attrvalue[:1] == '\\'' == attrvalue[-1:] or \\\n                 attrvalue[:1] == '\"' == attrvalue[-1:]:\n                attrvalue = attrvalue[1:-1]\n            if attrvalue:\n                attrvalue = unescape(attrvalue)\n            attrs.append((attrname.lower(), attrvalue))\n            k = m.end()\n\n        end = rawdata[k:endpos].strip()\n        if end not in (\">\", \"/>\"):\n            self.handle_data(rawdata[i:endpos])\n            return endpos\n        if end.endswith('/>'):\n            # XHTML-style empty tag: <span attr=\"value\" />\n            self.handle_startendtag(tag, attrs)\n        else:\n            self.handle_starttag(tag, attrs)\n            if tag in self.CDATA_CONTENT_ELEMENTS:\n                self.set_cdata_mode(tag)\n        return endpos\n```\n"}], "max_length": 3521, "stop": "", "temp": 0, "stream": false, "engine": "gpt-3.5-turbo"}, "ret_val": {"completion": {"choices": [{"finish_reason": "stop", "index": 0, "message": {"content": "### JavaScript\n\n```javascript\n// TRANSLATION NOTE: the following function(s) is inside a class `HTMLParser`\n// Internal -- handle starttag, return end or -1 if not terminated\nparse_starttag(i) {\n    this.__starttag_text = null;\n    let endpos = this.check_for_whole_start_tag(i);\n    if (endpos < 0) {\n        return endpos;\n    }\n    let rawdata = this.rawdata;\n    this.__starttag_text = rawdata.slice(i, endpos);\n\n    // Now parse the data between i+1 and j into a tag and attrs\n    let attrs = [];\n    let match = tagfind_tolerant.exec(rawdata.slice(i + 1));\n    if (!match) {\n        throw new Error('unexpected call to parse_starttag()');\n    }\n    let k = match[0].length + 1;\n    this.lasttag = match[1].toLowerCase();\n    while (k < endpos) {\n        let m = attrfind_tolerant.exec(rawdata.slice(k));\n        if (!m) {\n            break;\n        }\n        let [_, attrname, rest, attrvalue] = m;\n        if (!rest) {\n            attrvalue = null;\n        } else if (attrvalue.startsWith(\"'\") && attrvalue.endsWith(\"'\") || attrvalue.startsWith('\"') && attrvalue.endsWith('\"')) {\n            attrvalue = attrvalue.slice(1, -1);\n        }\n        if (attrvalue) {\n            attrvalue = unescape(attrvalue);\n        }\n        attrs.push([attrname.toLowerCase(), attrvalue]);\n        k += m[0].length;\n    }\n\n    let end = rawdata.slice(k, endpos).trim();\n    if (end !== \">\" && end !== \"/>\") {\n        this.handle_data(rawdata.slice(i, endpos));\n        return endpos;\n    }\n    if (end.endsWith('/>')) {\n        // XHTML-style empty tag: <span attr=\"value\" />\n        this.handle_startendtag(this.lasttag, attrs);\n    } else {\n        this.handle_starttag(this.lasttag, attrs);\n        if (this.CDATA_CONTENT_ELEMENTS.includes(this.lasttag)) {\n            this.set_cdata_mode(this.lasttag);\n        }\n    }\n    return endpos;\n}\n```", "role": "assistant"}}], "created": 1687491695, "id": "chatcmpl-7URxvjEIhkAxWe4cbACNq04cWZR0v", "model": "gpt-3.5-turbo-0301", "object": "chat.completion", "usage": {"completion_tokens": 473, "prompt_tokens": 575, "total_tokens": 1048}}, "timespan": 15.643573880195618, "error_msg": null}}