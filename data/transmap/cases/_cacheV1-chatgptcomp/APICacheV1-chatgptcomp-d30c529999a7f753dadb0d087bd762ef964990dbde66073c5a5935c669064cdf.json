{"func_id": "chatgptcomp", "params": {"messages": [{"role": "system", "content": "\nYou are a helpful assistant that translates Python code into JavaScript code.\nFor user requests, you output the code directly without explanations, and always in the same format.\nYou should ALWAYS output best-effort translation, even if you are provided partial code, modules, or code with dependencies.\nFor omitted part of the code in the source '...', you should also use '...' to denote the omitted part in the translation.\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nprint(\"Hello World\")\n```\n"}, {"role": "assistant", "content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nconsole.log(\"Hello World\");\n```\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\n    # TRANSLATION NOTE: these functions are inside a class `ParserBase.`\n    # Internal -- scan a name token and the new position and the token, or\n    # return -1 if we've reached the end of the buffer.\n    def _scan_name(self, i, declstartpos):\n        rawdata = self.rawdata\n        n = len(rawdata)\n        if i == n:\n            return None, -1\n        m = _declname_match(rawdata, i)\n        if m:\n            s = m.group()\n            name = s.strip()\n            if (i + len(s)) == n:\n                return None, -1  # end of buffer\n            return name.lower(), m.end()\n        else:\n            self.updatepos(declstartpos, i)\n            raise AssertionError(\n                \"expected name token at %r\" % rawdata[declstartpos:declstartpos+20]\n            )\n\n    # To be overridden -- handlers for unknown objects\n    def unknown_decl(self, data):\n        pass\n```\n"}], "max_length": 3714, "stop": "", "temp": 0, "stream": false, "engine": "gpt-3.5-turbo"}, "ret_val": {"completion": {"choices": [{"finish_reason": "stop", "index": 0, "message": {"content": "### JavaScript\n\n```javascript\n// TRANSLATION NOTE: these functions are inside a class `ParserBase.`\n// Internal -- scan a name token and the new position and the token, or\n// return -1 if we've reached the end of the buffer.\n_scan_name(i, declstartpos) {\n    let rawdata = this.rawdata;\n    let n = rawdata.length;\n    if (i === n) {\n        return [null, -1];\n    }\n    let m = _declname_match(rawdata, i);\n    if (m) {\n        let s = m[0];\n        let name = s.trim();\n        if ((i + s.length) === n) {\n            return [null, -1]; // end of buffer\n        }\n        return [name.toLowerCase(), m.index + s.length];\n    } else {\n        this.updatepos(declstartpos, i);\n        throw new Error(`expected name token at ${rawdata.slice(declstartpos, declstartpos + 20)}`);\n    }\n}\n\n// To be overridden -- handlers for unknown objects\nunknown_decl(data) {\n    // pass\n}\n```", "role": "assistant"}}], "created": 1687491601, "id": "chatcmpl-7URwPXMVDvbx58Dejklkh4oPekf9D", "model": "gpt-3.5-turbo-0301", "object": "chat.completion", "usage": {"completion_tokens": 236, "prompt_tokens": 382, "total_tokens": 618}}, "timespan": 7.977575156837702, "error_msg": null}}