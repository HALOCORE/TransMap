{"func_id": "chatgptcomp", "params": {"messages": [{"role": "system", "content": "\nYou are a helpful assistant that translates Python code into JavaScript code.\nFor user requests, you output the code directly without explanations, and always in the same format.\nYou should ALWAYS output best-effort translation, even if you are provided partial code, modules, or code with dependencies.\nFor omitted part of the code in the source '...', you should also use '...' to denote the omitted part in the translation.\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nprint(\"Hello World\")\n```\n"}, {"role": "assistant", "content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nconsole.log(\"Hello World\");\n```\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nclass HTMLParser(ParserBase):\n    \"\"\"Find tags and other markup and call handler functions.\n\n    Usage:\n        p = HTMLParser()\n        p.feed(data)\n        ...\n        p.close()\n\n    Start tags are handled by calling self.handle_starttag() or\n    self.handle_startendtag(); end tags by self.handle_endtag().  The\n    data between tags is passed from the parser to the derived class\n    by calling self.handle_data() with the data as argument (the data\n    may be split up in arbitrary chunks).  If convert_charrefs is\n    True the character references are converted automatically to the\n    corresponding Unicode character (and self.handle_data() is no\n    longer split in chunks), otherwise they are passed by calling\n    self.handle_entityref() or self.handle_charref() with the string\n    containing respectively the named or numeric reference as the\n    argument.\n    \"\"\"\n\n    CDATA_CONTENT_ELEMENTS = (\"script\", \"style\")\n\n    def __init__(self, *, convert_charrefs=True):\n        \"\"\"Initialize and reset this instance.\n\n        If convert_charrefs is True (the default), all character references\n        are automatically converted to the corresponding Unicode characters.\n        \"\"\"\n        self.convert_charrefs = convert_charrefs\n        self.reset()\n\n    def reset(self):\n        \"\"\"Reset this instance.  Loses all unprocessed data.\"\"\"\n        self.rawdata = ''\n        self.lasttag = '???'\n        self.interesting = interesting_normal\n        self.cdata_elem = None\n        ParserBase.reset(self)\n\n    def feed(self, data):\n        r\"\"\"Feed data to the parser.\n\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\\n').\n        \"\"\"\n        self.rawdata = self.rawdata + data\n        self.goahead(0)\n\n    def close(self):\n        \"\"\"Handle any buffered data.\"\"\"\n        self.goahead(1)\n\n    __starttag_text = None\n\n    def get_starttag_text(self):\n        \"\"\"Return full source of start tag: '<...>'.\"\"\"\n        return self.__starttag_text\n\n    def set_cdata_mode(self, elem):\n        self.cdata_elem = elem.lower()\n        self.interesting = re.compile(r'</\\s*%s\\s*>' % self.cdata_elem, re.I)\n\n    def clear_cdata_mode(self):\n        self.interesting = interesting_normal\n        self.cdata_elem = None\n```\n"}], "max_length": 3428, "stop": "", "temp": 0, "stream": false, "engine": "gpt-3.5-turbo"}, "ret_val": {"completion": {"choices": [{"finish_reason": "stop", "index": 0, "message": {"content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nclass HTMLParser extends ParserBase {\n    constructor({ convert_charrefs = true } = {}) {\n        super();\n        this.convert_charrefs = convert_charrefs;\n        this.reset();\n    }\n\n    reset() {\n        this.rawdata = '';\n        this.lasttag = '???';\n        this.interesting = interesting_normal;\n        this.cdata_elem = null;\n        super.reset();\n    }\n\n    feed(data) {\n        this.rawdata = this.rawdata + data;\n        this.goahead(0);\n    }\n\n    close() {\n        this.goahead(1);\n    }\n\n    get_starttag_text() {\n        return this.__starttag_text;\n    }\n\n    set_cdata_mode(elem) {\n        this.cdata_elem = elem.toLowerCase();\n        this.interesting = new RegExp(`</\\\\s*${this.cdata_elem}\\\\s*>`, 'i');\n    }\n\n    clear_cdata_mode() {\n        this.interesting = interesting_normal;\n        this.cdata_elem = null;\n    }\n    \n    static CDATA_CONTENT_ELEMENTS = [\"script\", \"style\"];\n}\n```", "role": "assistant"}}], "created": 1687491629, "id": "chatcmpl-7URwrzk1tnjZWNDHFv2lx5pQktQ7G", "model": "gpt-3.5-turbo-0301", "object": "chat.completion", "usage": {"completion_tokens": 226, "prompt_tokens": 668, "total_tokens": 894}}, "timespan": 7.202917132526636, "error_msg": null}}