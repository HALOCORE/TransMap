{"func_id": "chatgptcomp", "params": {"messages": [{"role": "system", "content": "\nYou are a helpful assistant that translates Python code into JavaScript code.\nFor user requests, you output the code directly without explanations, and always in the same format.\nYou should ALWAYS output best-effort translation, even if you are provided partial code, modules, or code with dependencies.\nFor omitted part of the code in the source '...', you should also use '...' to denote the omitted part in the translation.\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nprint(\"Hello World\")\n```\n"}, {"role": "assistant", "content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nconsole.log(\"Hello World\");\n```\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\ndef merge(*iterables, reverse=False):\n    h = []\n    h_append = h.append\n\n    if reverse:\n        _heapify = _heapify_max\n        _heappop = _heappop_max\n        _heapreplace = _heapreplace_max\n        direction = -1\n    else:\n        _heapify = heapify\n        _heappop = heappop\n        _heapreplace = heapreplace\n        direction = 1\n\n\n    for order, it in enumerate(map(iter, iterables)):\n        try:\n            next = it.__next__\n            h_append([next(), order * direction, next])\n        except StopIteration:\n            pass\n    _heapify(h)\n    while len(h) > 1:\n        try:\n            while True:\n                value, order, next = s = h[0]\n                yield value\n                s[0] = next()\n                _heapreplace(h, s)\n        except StopIteration:\n            _heappop(h)\n    if h:\n        value, order, next = h[0]\n        yield value\n        yield from next.__self__\n    return\n\n```\n"}], "max_length": 3694, "stop": "", "temp": 0, "stream": false, "engine": "gpt-3.5-turbo"}, "ret_val": {"completion": {"choices": [{"finish_reason": "stop", "index": 0, "message": {"content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nfunction merge(...iterables) {\n    let h = [];\n    let h_append = h.push.bind(h);\n\n    let _heapify, _heappop, _heapreplace, direction;\n    if (reverse) {\n        _heapify = _heapify_max;\n        _heappop = _heappop_max;\n        _heapreplace = _heapreplace_max;\n        direction = -1;\n    } else {\n        _heapify = heapify;\n        _heappop = heappop;\n        _heapreplace = heapreplace;\n        direction = 1;\n    }\n\n    for (let order = 0; order < iterables.length; order++) {\n        let it = iterables[order][Symbol.iterator]();\n        try {\n            let next = it.next.bind(it);\n            h_append([next().value, order * direction, next]);\n        } catch (e) {\n            if (e instanceof StopIteration) {\n                // pass\n            } else {\n                throw e;\n            }\n        }\n    }\n    _heapify(h);\n    while (h.length > 1) {\n        try {\n            while (true) {\n                let [value, order, next] = s = h[0];\n                yield value;\n                s[0] = next().value;\n                _heapreplace(h, s);\n            }\n        } catch (e) {\n            if (e instanceof StopIteration) {\n                _heappop(h);\n            } else {\n                throw e;\n            }\n        }\n    }\n    if (h.length > 0) {\n        let [value, order, next] = h[0];\n        yield value;\n        yield* next.__self__;\n    }\n    return;\n}\n```\n\nNote: JavaScript does not have a built-in `StopIteration` exception, so we need to check for it manually. Also, the `yield from` statement in Python does not have a direct equivalent in JavaScript, so we need to use `yield*` instead.", "role": "assistant"}}], "created": 1687399976, "id": "chatcmpl-7U46aW2ugnma3hHFzWH3JFkmaGeGi", "model": "gpt-3.5-turbo-0301", "object": "chat.completion", "usage": {"completion_tokens": 420, "prompt_tokens": 402, "total_tokens": 822}}, "timespan": 16.065263718366623, "error_msg": null}}