{"func_id": "chatgptcomp", "params": {"messages": [{"role": "system", "content": "\nYou are a helpful assistant that translates Python code into JavaScript code.\nFor user requests, you output the code directly without explanations, and always in the same format.\nYou should ALWAYS output best-effort translation, even if you are provided partial code, modules, or code with dependencies.\nFor omitted part of the code in the source '...', you should also use '...' to denote the omitted part in the translation.\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nprint(\"Hello World\")\n```\n"}, {"role": "assistant", "content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nconsole.log(\"Hello World\");\n```\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\n__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge', 'nlargest', 'nsmallest', 'heappushpop']\n\ndef heappush(heap, item):\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\n\ndef heappop(heap):\n    lastelt = heap.pop()\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup(heap, 0)\n        return returnitem\n    return lastelt\n\ndef heapreplace(heap, item):\n    returnitem = heap[0]\n    heap[0] = item\n    _siftup(heap, 0)\n    return returnitem\n\ndef heappushpop(heap, item):\n    if heap and heap[0] < item:\n        item, heap[0] = heap[0], item\n        _siftup(heap, 0)\n    return item\n\ndef heapify(x):\n    n = len(x)\n    for i in reversed(range(n//2)):\n        _siftup(x, i)\n\n```\n"}], "max_length": 3692, "stop": "", "temp": 0, "stream": false, "engine": "gpt-3.5-turbo"}, "ret_val": {"completion": {"choices": [{"finish_reason": "stop", "index": 0, "message": {"content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nfunction heappush(heap, item) {\n    heap.push(item);\n    _siftdown(heap, 0, heap.length - 1);\n}\n\nfunction heappop(heap) {\n    let lastelt = heap.pop();\n    if (heap.length) {\n        let returnitem = heap[0];\n        heap[0] = lastelt;\n        _siftup(heap, 0);\n        return returnitem;\n    }\n    return lastelt;\n}\n\nfunction heapreplace(heap, item) {\n    let returnitem = heap[0];\n    heap[0] = item;\n    _siftup(heap, 0);\n    return returnitem;\n}\n\nfunction heappushpop(heap, item) {\n    if (heap.length && heap[0] < item) {\n        [item, heap[0]] = [heap[0], item];\n        _siftup(heap, 0);\n    }\n    return item;\n}\n\nfunction heapify(x) {\n    let n = x.length;\n    for (let i = Math.floor(n / 2); i >= 0; i--) {\n        _siftup(x, i);\n    }\n}\n\nconst _siftdown = (heap, startpos, pos) => {\n    let newitem = heap[pos];\n    while (pos > startpos) {\n        let parentpos = (pos - 1) >> 1;\n        let parent = heap[parentpos];\n        if (newitem < parent) {\n            heap[pos] = parent;\n            pos = parentpos;\n            continue;\n        }\n        break;\n    }\n    heap[pos] = newitem;\n};\n\nconst _siftup = (heap, pos) => {\n    let endpos = heap.length;\n    let startpos = pos;\n    let newitem = heap[pos];\n    let childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n        let rightpos = childpos + 1;\n        if (rightpos < endpos && !(heap[childpos] < heap[rightpos])) {\n            childpos = rightpos;\n        }\n        heap[pos] = heap[childpos];\n        pos = childpos;\n        childpos = 2 * pos + 1;\n    }\n    heap[pos] = newitem;\n    _siftdown(heap, startpos, pos);\n};\n\nconst __all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge', 'nlargest', 'nsmallest', 'heappushpop'];\n```", "role": "assistant"}}], "created": 1687399929, "id": "chatcmpl-7U45pUHbBxpwqOAOqfl90RQe7IHHD", "model": "gpt-3.5-turbo-0301", "object": "chat.completion", "usage": {"completion_tokens": 535, "prompt_tokens": 404, "total_tokens": 939}}, "timespan": 20.09438831359148, "error_msg": null}}