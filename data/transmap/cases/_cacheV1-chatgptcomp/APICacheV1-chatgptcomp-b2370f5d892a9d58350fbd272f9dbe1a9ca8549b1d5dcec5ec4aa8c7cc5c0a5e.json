{"func_id": "chatgptcomp", "params": {"messages": [{"role": "system", "content": "\nYou are a helpful assistant that translates Python code into JavaScript code.\nFor user requests, you output the code directly without explanations, and always in the same format.\nYou should ALWAYS output best-effort translation, even if you are provided partial code, modules, or code with dependencies.\nFor omitted part of the code in the source '...', you should also use '...' to denote the omitted part in the translation.\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nprint(\"Hello World\")\n```\n"}, {"role": "assistant", "content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nconsole.log(\"Hello World\");\n```\n"}, {"role": "user", "content": "**Translate this code from Python into Modern JavaScript:**\n### Python\n\n```python\nclass ParserBase:\n    \"\"\"Parser base class which provides some common support methods used\n    by the SGML/HTML and XHTML parsers.\"\"\"\n\n    def __init__(self):\n        if self.__class__ is ParserBase:\n            raise RuntimeError(\n                \"ParserBase must be subclassed\")\n\n    def reset(self):\n        self.lineno = 1\n        self.offset = 0\n\n    def getpos(self):\n        \"\"\"Return current line number and offset.\"\"\"\n        return self.lineno, self.offset\n\n    # Internal -- update line number and offset.  This should be\n    # called for each piece of data exactly once, in order -- in other\n    # words the concatenation of all the input strings to this\n    # function should be exactly the entire input.\n    def updatepos(self, i, j):\n        if i >= j:\n            return j\n        rawdata = self.rawdata\n        nlines = rawdata.count(\"\\n\", i, j)\n        if nlines:\n            self.lineno = self.lineno + nlines\n            pos = rawdata.rindex(\"\\n\", i, j) # Should not fail\n            self.offset = j-(pos+1)\n        else:\n            self.offset = self.offset + j-i\n        return j\n\n    _decl_otherchars = ''\n```\n"}], "max_length": 3660, "stop": "", "temp": 0, "stream": false, "engine": "gpt-3.5-turbo"}, "ret_val": {"completion": {"choices": [{"finish_reason": "stop", "index": 0, "message": {"content": "### JavaScript\n\n```javascript\n\"use strict\";\n\nclass ParserBase {\n    constructor() {\n        if (this.constructor === ParserBase) {\n            throw new Error(\"ParserBase must be subclassed\");\n        }\n    }\n\n    reset() {\n        this.lineno = 1;\n        this.offset = 0;\n    }\n\n    getpos() {\n        return [this.lineno, this.offset];\n    }\n\n    updatepos(i, j) {\n        if (i >= j) {\n            return j;\n        }\n        let rawdata = this.rawdata;\n        let nlines = rawdata.split(\"\\n\").length - 1;\n        if (nlines) {\n            this.lineno += nlines;\n            let pos = rawdata.lastIndexOf(\"\\n\", j);\n            this.offset = j - (pos + 1);\n        } else {\n            this.offset += j - i;\n        }\n        return j;\n    }\n}\n\nParserBase.prototype._decl_otherchars = '';\n```", "role": "assistant"}}], "created": 1687491488, "id": "chatcmpl-7URuaIthVC06BcAoES2of6Zjelabc", "model": "gpt-3.5-turbo-0301", "object": "chat.completion", "usage": {"completion_tokens": 198, "prompt_tokens": 436, "total_tokens": 634}}, "timespan": 6.456885766237974, "error_msg": null}}